{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "gnetId": null,
  "graphTooltip": 0,
  "id": 10,
  "iteration": 1573451531618,
  "links": [],
  "panels": [
    {
      "cacheTimeout": null,
      "content": "# CE - 201 (PV)\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 0,
        "y": 0
      },
      "id": 46,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "content": "\n# \n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 5,
        "x": 4,
        "y": 0
      },
      "id": 48,
      "links": [],
      "mode": "markdown",
      "options": {},
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType,\n      countingCentreElection.electionId\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     AND T1.electionId=1 \n\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "transparent": true,
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#56A64B",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 5,
        "x": 9,
        "y": 0
      },
      "id": 10,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "CC",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT \n    concat(if(completedCountingCentres is null,0,completedCountingCentres),'/',totalCountingCentres,' - ',IF(totalCountingCentres<>0 AND completedCountingCentres<>0,concat(round(( completedCountingCentres/totalCountingCentres * 100 ))),0)) AS value FROM (\n    SELECT \n        $totalPostalCountingCentres AS totalCountingCentres,\n        SUM(IF(status = \"verified\",1,0)) AS completedCountingCentres\n    FROM dashboard_status_CE_201\n    WHERE electionId = \"$electionId\"\n    AND voteType = \"Postal\"\n    ) AS T1",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "content": "\n# \n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 5,
        "x": 14,
        "y": 0
      },
      "id": 49,
      "links": [],
      "mode": "markdown",
      "options": {},
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType,\n      countingCentreElection.electionId\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     AND T1.electionId=1 \n\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "transparent": true,
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#F2CC0C",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 5,
        "x": 19,
        "y": 0
      },
      "id": 66,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "ED",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- SELECT \n--     concat(if(completedElectoralDistricts is null,0,completedElectoralDistricts),'/',totalElectoralDistricts,' - ',IF(totalElectoralDistricts<>0 AND completedElectoralDistricts<>0,concat(round(( completedElectoralDistricts/totalElectoralDistricts * 100 ))),0)) AS value FROM (\n--     SELECT \n--         $totalElectoralDistricts AS totalElectoralDistricts,\n--         SUM(IF(totalPollingDivisions=completedPollingDivisions,1,0)) AS completedElectoralDistricts\n--         FROM (\n--     SELECT \n--         $totalPollingDivisions AS totalPollingDivisions,\n--         SUM(IF(totalCountingCentres=completedCountingCentres,1,0)) AS completedPollingDivisions,\n--         electoralDistrictId\n--         FROM (\n--         SELECT \n--             $totalPostalCountingCentres AS totalCountingCentres,\n--             SUM(IF(status = \"Verified\",1,0)) AS completedCountingCentres,\n--             electoralDistrictId\n--         FROM dashboard_status_CE_201\n--         WHERE electionId = \"$electionId\"\n--         AND voteType = \"Postal\"\n--         GROUP BY countingCentreId\n--     ) AS T1 GROUP BY electoralDistrictId\n--     ) AS T2\n--     ) AS T3\n\nSELECT \nconcat(if(completedElectoralDistricts is null,0,completedElectoralDistricts),'/',totalElectoralDistricts,' - ',IF(totalElectoralDistricts<>0 AND completedElectoralDistricts<>0,concat(round(( completedElectoralDistricts/totalElectoralDistricts * 100 ))),0)) AS value \nFROM (\n        SELECT \n        $totalElectoralDistricts AS totalElectoralDistricts,\n        SUM(IF(totalCountingCentres=completedCountingCentres,1,0)) AS completedElectoralDistricts\n        FROM (\n          SELECT \n            COUNT(DISTINCT dashboard_status_CE_201.countingCentreId) AS completedCountingCentres,\n            COUNT(DISTINCT area_map.countingCentreId) AS totalCountingCentres,\n            electoralDistrict.areaName as electoralDistrict  \n          FROM \n            area_map\n            join area as pollingDivision on pollingDivision.areaId = area_map.pollingDivisionId\n            join area as electoralDistrict on electoralDistrict.areaId = area_map.electoralDistrictId\n            left join  dashboard_status_CE_201 on dashboard_status_CE_201.countingCentreId = area_map.countingCentreId\n              and dashboard_status_CE_201.status = \"Verified\"\n              and dashboard_status_CE_201.voteType = \"Postal\"\n              and dashboard_status_CE_201.electionId = \"$electionId\"\n          GROUP BY\n            area_map.electoralDistrictId\n          ) AS T1\n          ) AS T2",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "content": "# PRE - 41 (PV)\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 0,
        "y": 2
      },
      "id": 56,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "content": "\n# \n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 5,
        "x": 4,
        "y": 2
      },
      "id": 58,
      "links": [],
      "mode": "markdown",
      "options": {},
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": " select \n -- IF(total<>0 AND Completed<>0,concat(round(( Completed/total * 100 ),2)),concat(0,'%')) AS percentage,\n concat(round(( Completed ),0),'/',total,'  ',IF(total<>0 AND Completed<>0,concat(round(( Completed/total * 100 ),2),'%'),concat(0,'%'))) AS value FROM (\nSELECT \n -- concat(round(( SUM(IF (Status=\"Completed\", 1, 0)) ),0),'/',count(DISTINCT countingCentreId)) AS value\n  -- IF(totalRegisteredPostalVotes<>0 AND totalVoteCount<>0,concat(round(( totalVoteCount/totalRegisteredPostalVotes * 100 ),2)),0) AS percentage\ncount(DISTINCT pollingDivisionId) AS total,\n  SUM(IF (Status=\"Completed\", 1, 0)) AS Completed \nFROM\n  (SELECT \n    pollingDivisionId,\n    pollingDivisionName,\n    Status\n  \n  FROM postal_and_nonpostal_tallysheet_status_view\n  WHERE electionName = \"$elections\"\n  AND electoralDistrictName = \"$district\"\n  AND pollingDivisionName IN ($Polling_Division)\n  AND tallySheetCode = \"PRE_41\"\n  GROUP BY \n    pollingDivisionId,\n    Status\n  ) as polling_division_wise_status\n) AS T1\n -- select count(electoralDistrictId) from postal_and_nonpostal_tallysheet_status_view group by electoralDistrictId\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "transparent": true,
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#56A64B",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 5,
        "x": 9,
        "y": 2
      },
      "id": 57,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "CC",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT \nconcat(if(completedCountingCentres is null,0,completedCountingCentres),'/',totalCountingCentres,' - ',IF(totalCountingCentres<>0 AND completedCountingCentres<>0,concat(round(( completedCountingCentres/totalCountingCentres * 100 ))),0)) AS value \nFROM (\nSELECT \n    $totalPostalCountingCentres AS totalCountingCentres,\n    SUM(IF(status = \"Verified\",1,0)) AS completedCountingCentres\nFROM (\n    SELECT \n    countingCentreId,\n    status\n    FROM dashboard_status_PRE_41\n    WHERE electionId = \"$electionId\"\n    AND voteType = \"Postal\"\n    GROUP BY countingCentreId\n  ) AS counting_centre_wise_status\n) AS T1",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "content": "\n# \n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 5,
        "x": 14,
        "y": 2
      },
      "id": 59,
      "links": [],
      "mode": "markdown",
      "options": {},
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": " select \n -- IF(total<>0 AND Completed<>0,concat(round(( Completed/total * 100 ),2)),concat(0,'%')) AS percentage,\n concat(round(( Completed ),0),'/',total,'  ',IF(total<>0 AND Completed<>0,concat(round(( Completed/total * 100 ),2),'%'),concat(0,'%'))) AS value FROM (\nSELECT \n -- concat(round(( SUM(IF (Status=\"Completed\", 1, 0)) ),0),'/',count(DISTINCT countingCentreId)) AS value\n  -- IF(totalRegisteredPostalVotes<>0 AND totalVoteCount<>0,concat(round(( totalVoteCount/totalRegisteredPostalVotes * 100 ),2)),0) AS percentage\ncount(DISTINCT pollingStationId) AS total,\n  SUM(IF (Status=\"Completed\", 1, 0)) AS Completed \nFROM\n  (SELECT \n    pollingStationId,\n    pollingStationName,\n    Status\n  \n  FROM postal_and_nonpostal_tallysheet_status_view\n  WHERE electionName = \"$elections\"\n  AND electoralDistrictName = \"$district\"\n  AND pollingDivisionName IN ($Polling_Division)\n  AND tallySheetCode = \"PRE_41\"\n  GROUP BY \n    pollingStationId,\n    Status\n  ) as polling_station_wise_status\n) AS T1\n -- select count(electoralDistrictId) from postal_and_nonpostal_tallysheet_status_view group by electoralDistrictId\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "transparent": true,
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#F2CC0C",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 5,
        "x": 19,
        "y": 2
      },
      "id": 55,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "ED",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- SELECT \n-- concat(completedElectoralDistricts,'/',totalElectoralDistricts,' - ',IF(totalElectoralDistricts<>0 AND completedElectoralDistricts<>0,concat(round(( completedElectoralDistricts/totalElectoralDistricts * 100 ))),0)) AS value \n-- FROM (\n--     SELECT \n--     $totalElectoralDistricts AS totalElectoralDistricts,\n--     SUM(IF(totalPollingDivisions=completedPollingDivisions,1,0)) AS completedElectoralDistricts\n--     FROM (\n--     SELECT \n--     $totalPollingDivisions AS totalPollingDivisions,\n--     SUM(IF(totalCountingCentres=completedCountingCentres,1,0)) AS completedPollingDivisions\n--     FROM (\n--     SELECT \n--     $totalPostalCountingCentres AS totalCountingCentres,\n--     SUM(IF(status = \"verrified\",1,0)) AS completedCountingCentres,\n--     electoralDistrictId\n-- FROM (\n--     SELECT \n--     countingCentreId,\n--     status,\n--     electoralDistrictId,\n--     pollingDivisionId\n--     FROM dashboard_status_PRE_41\n--     WHERE electionId = \"$electionId\"\n--     AND voteType = \"Postal\"\n--     GROUP BY countingCentreId\n--     ) AS counting_centre_wise_status\n--     ) AS T1 GROUP BY electoralDistrictId\n--     ) AS T2\n--     ) AS T3\n\nSELECT \nconcat(if(completedElectoralDistricts is null,0,completedElectoralDistricts),'/',totalElectoralDistricts,' - ',IF(totalElectoralDistricts<>0 AND completedElectoralDistricts<>0,concat(round(( completedElectoralDistricts/totalElectoralDistricts * 100 ))),0)) AS value \nFROM (\n        SELECT \n        $totalElectoralDistricts AS totalElectoralDistricts,\n        SUM(IF(totalCountingCentres=completedCountingCentres,1,0)) AS completedElectoralDistricts\n        FROM (\n          SELECT \n            COUNT(DISTINCT dashboard_status_PRE_41.countingCentreId) AS completedCountingCentres,\n            COUNT(DISTINCT area_map.countingCentreId) AS totalCountingCentres,\n            electoralDistrict.areaName as electoralDistrict  \n          FROM \n            area_map\n            join area as pollingDivision on pollingDivision.areaId = area_map.pollingDivisionId\n            join area as electoralDistrict on electoralDistrict.areaId = area_map.electoralDistrictId\n            left join  dashboard_status_PRE_41 on dashboard_status_PRE_41.countingCentreId = area_map.countingCentreId\n              and dashboard_status_PRE_41.status = \"Verified\"\n              and dashboard_status_PRE_41.voteType = \"Postal\"\n              and dashboard_status_PRE_41.electionId = \"$electionId\"\n          GROUP BY\n            area_map.electoralDistrictId\n          ) AS T1\n          ) AS T2\n    \n    \n    \n    \n\n          \n          \n          \n          \n          ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "content": "# CE - 201 \n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 0,
        "y": 4
      },
      "id": 50,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "rgba(237, 129, 40, 0.89)",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 5,
        "x": 4,
        "y": 4
      },
      "id": 53,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "PS",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT \n    concat(if(completedPollingStations is null,0,completedPollingStations),'/',totalPollingStations,' - ',IF(totalPollingStations<>0 AND completedPollingStations<>0,concat(round(( completedPollingStations/totalPollingStations * 100 ))),0)) AS value FROM (\n    SELECT \n        $totalPollingStations AS totalPollingStations,\n        SUM(IF(status = \"Verified\",1,0)) AS completedPollingStations\n    FROM dashboard_status_CE_201\n    WHERE electionId = \"$electionId\"\n    AND voteType = \"Ordinary\"\n    ) AS T1\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#56A64B",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 5,
        "x": 9,
        "y": 4
      },
      "id": 51,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "CC",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT \n    concat(if(completedCountingCentres is null,0,completedCountingCentres),'/',totalCountingCentres,' - ',IF(totalCountingCentres<>0 AND completedCountingCentres<>0,concat(round(( completedCountingCentres/totalCountingCentres * 100 ))),0)) AS value \n    FROM (\n    SELECT \n        $OrdinaryCountingCentres AS totalCountingCentres,\n        SUM(IF(status = \"Verified\",1,0)) AS completedCountingCentres\n    FROM (\n    SELECT \n        countingCentreId,\n        status\n    FROM dashboard_status_CE_201\n    WHERE electionId = \"$electionId\"\n    AND voteType = \"Ordinary\"\n    GROUP BY countingCentreId\n    ) AS T1\n    ) AS T2\n\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#A352CC",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 5,
        "x": 14,
        "y": 4
      },
      "id": 52,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "PD",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "\n\nSELECT\n      concat(if(completedPollingDivisions is null,0,completedPollingDivisions),'/',$totalPollingDivisions,' - ',IF($totalPollingDivisions<>0 AND completedPollingDivisions<>0,concat(round(( completedPollingDivisions/$totalPollingDivisions * 100 ))),0)) AS value \nFROM\n  (\n    SELECT\n      SUM(IF(notCompletedCountingCentres = 0, 1, 0)) as completedPollingDivisions\n    FROM\n      (\n        SELECT \n          pollingDivision.*,\n          SUM(IF(status = \"Verified\",0,1)) as notCompletedCountingCentres\n        FROM \n          dashboard_status_CE_201\n          join area_map on area_map.countingCentreId = dashboard_status_CE_201.countingCentreId\n          join area as pollingDivision on pollingDivision.areaId = area_map.pollingDivisionId\n        WHERE \n          dashboard_status_CE_201.electionId = \"$electionId\"\n          AND dashboard_status_CE_201.voteType = \"Ordinary\"\n        GROUP BY\n          area_map.pollingDivisionId\n      ) as pollingDivision201Status\n    ) as pollingDivision201Summary",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#F2CC0C",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 5,
        "x": 19,
        "y": 4
      },
      "id": 60,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "ED",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- SELECT \n--     concat(completedElectoralDistricts,'/',totalElectoralDistricts,' - ',IF(totalElectoralDistricts<>0 AND completedElectoralDistricts<>0,concat(round(( completedElectoralDistricts/totalElectoralDistricts * 100 ))),0)) AS value \n--     FROM (\n--     SELECT \n--         $totalElectoralDistricts AS totalElectoralDistricts,\n--         SUM(IF(totalPollingDivisions=completedPollingDivisions,1,0)) AS completedElectoralDistricts\n--         FROM (\n--     SELECT \n--         $totalPollingDivisions AS totalPollingDivisions,\n--         SUM(IF(totalCountingCentres=completedCountingCentres,1,0)) AS completedPollingDivisions,\n--         electoralDistrictId\n--         FROM (\n--         SELECT \n--         $OrdinaryCountingCentres AS totalCountingCentres,\n--         SUM(IF(status = \"Verified\",1,0)) AS completedCountingCentres,\n--         electoralDistrictId\n--     FROM (\n--     SELECT \n--         countingCentreId,\n--         status,\n--         pollingDivisionId,\n--         electoralDistrictId\n--         FROM dashboard_status_CE_201\n--     WHERE electionId = \"$electionId\"\n--     AND voteType = \"Ordinary\"\n--     GROUP BY countingCentreId\n--     ) AS T1\n--     ) AS T2 GROUP BY electoralDistrictId\n--     ) AS T3\n--     ) AS T4\n\nSELECT \nconcat(if(completedElectoralDistricts is null,0,completedElectoralDistricts),'/',totalElectoralDistricts,' - ',IF(totalElectoralDistricts<>0 AND completedElectoralDistricts<>0,concat(round(( completedElectoralDistricts/totalElectoralDistricts * 100 ))),0)) AS value \nFROM (\n        SELECT \n        $totalElectoralDistricts AS totalElectoralDistricts,\n        SUM(IF(totalCountingCentres=completedCountingCentres,1,0)) AS completedElectoralDistricts\n        FROM (\n          SELECT \n            COUNT(DISTINCT dashboard_status_CE_201.countingCentreId) AS completedCountingCentres,\n            COUNT(DISTINCT area_map.countingCentreId) AS totalCountingCentres,\n            electoralDistrict.areaName as electoralDistrict  \n          FROM \n            area_map\n            join area as pollingDivision on pollingDivision.areaId = area_map.pollingDivisionId\n            join area as electoralDistrict on electoralDistrict.areaId = area_map.electoralDistrictId\n            left join  dashboard_status_CE_201 on dashboard_status_CE_201.countingCentreId = area_map.countingCentreId\n              and dashboard_status_CE_201.status = \"Verified\"\n              and dashboard_status_CE_201.voteType = \"Ordinary\"\n              and dashboard_status_CE_201.electionId = \"$electionId\"\n          GROUP BY\n            area_map.electoralDistrictId\n          ) AS T1\n          ) AS T2\n    \n    \n    \n    \n\n          \n          \n          \n          \n          ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "content": "# PRE - 41\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 0,
        "y": 6
      },
      "id": 61,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "rgba(237, 129, 40, 0.89)",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 5,
        "x": 4,
        "y": 6
      },
      "id": 64,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "PS",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT \n    concat(completedPollingStations,'/',totalPollingStations,' - ',IF(totalPollingStations<>0 AND completedPollingStations<>0,concat(round(( completedPollingStations/totalPollingStations * 100 ))),0)) AS value FROM (\n    SELECT $totalPollingStations AS totalPollingStations,COUNT(pollingstationid) AS completedPollingStations\nFROM   (SELECT countingcentreid \n        FROM   `dashboard_status_PRE_41` \n        WHERE  status = \"verified\" \n        AND electionId = \"$electionId\"\n        GROUP  BY countingcentreid) AS countingCentres \n       LEFT JOIN area_map \n              ON countingCentres.countingcentreid = area_map.countingcentreid \n    ) AS T1\n\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#56A64B",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 5,
        "x": 9,
        "y": 6
      },
      "id": 62,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "CC",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT \nconcat(if(completedCountingCentres is null,0,completedCountingCentres),'/',totalCountingCentres,' - ',IF(totalCountingCentres<>0 AND completedCountingCentres<>0,concat(round(( completedCountingCentres/totalCountingCentres * 100 ))),0)) AS value \nFROM (\nSELECT \n    $OrdinaryCountingCentres AS totalCountingCentres,\n    SUM(IF(status = \"Verified\",1,0)) AS completedCountingCentres\nFROM (\n    SELECT \n    countingCentreId,\n    status\n    FROM dashboard_status_PRE_41\n    WHERE electionId = \"$electionId\"\n    AND voteType = \"Ordinary\"\n    GROUP BY countingCentreId\n  ) AS counting_centre_wise_status\n) AS T1",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#A352CC",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 5,
        "x": 14,
        "y": 6
      },
      "id": 63,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "PD",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT\n      concat(if(completedPollingDivisions is null,0,completedPollingDivisions),'/',$totalPollingDivisions,' - ',IF($totalPollingDivisions<>0 AND completedPollingDivisions<>0,concat(round(( completedPollingDivisions/$totalPollingDivisions * 100 ))),0)) AS value \nFROM\n  (\n    SELECT\n      SUM(IF(notCompletedCountingCentres = 0, 1, 0)) as completedPollingDivisions\n    FROM\n      (\n        SELECT \n          pollingDivision.*,\n          SUM(IF(status = \"Verified\",0,1)) as notCompletedCountingCentres\n        FROM \n          dashboard_status_PRE_41\n          join area_map on area_map.countingCentreId = dashboard_status_PRE_41.countingCentreId\n          join area as pollingDivision on pollingDivision.areaId = area_map.pollingDivisionId\n        WHERE \n          dashboard_status_PRE_41.electionId = \"$electionId\"\n          AND dashboard_status_PRE_41.voteType = \"Ordinary\"\n        GROUP BY\n          area_map.pollingDivisionId\n      ) as pollingDivision201Status\n    ) as pollingDivision201Summary",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#F2CC0C",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 5,
        "x": 19,
        "y": 6
      },
      "id": 65,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "ED",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT \nconcat(if(completedElectoralDistricts is null,0,completedElectoralDistricts),'/',totalElectoralDistricts,' - ',IF(totalElectoralDistricts<>0 AND completedElectoralDistricts<>0,concat(round(( completedElectoralDistricts/totalElectoralDistricts * 100 ))),0)) AS value \nFROM (\n        SELECT \n        $totalElectoralDistricts AS totalElectoralDistricts,\n        SUM(IF(totalCountingCentres=completedCountingCentres,1,0)) AS completedElectoralDistricts\n        FROM (\n          SELECT \n            COUNT(DISTINCT dashboard_status_PRE_41.countingCentreId) AS completedCountingCentres,\n            COUNT(DISTINCT area_map.countingCentreId) AS totalCountingCentres,\n            electoralDistrict.areaName as electoralDistrict  \n          FROM \n            area_map\n            join area as pollingDivision on pollingDivision.areaId = area_map.pollingDivisionId\n            join area as electoralDistrict on electoralDistrict.areaId = area_map.electoralDistrictId\n            left join  dashboard_status_PRE_41 on dashboard_status_PRE_41.countingCentreId = area_map.countingCentreId\n              and dashboard_status_PRE_41.status = \"Verified\"\n              and dashboard_status_PRE_41.voteType = \"Ordinary\"\n              and dashboard_status_PRE_41.electionId = \"$electionId\"\n          GROUP BY\n            area_map.electoralDistrictId\n          ) AS T1\n          ) AS T2\n    \n    \n    \n    \n\n          \n          \n          \n          \n          ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "columns": [],
      "fontSize": "150%",
      "gridPos": {
        "h": 9,
        "w": 12,
        "x": 0,
        "y": 8
      },
      "id": 8,
      "links": [],
      "options": {},
      "pageSize": null,
      "scroll": true,
      "showHeader": true,
      "sort": {
        "col": 1,
        "desc": true
      },
      "styles": [
        {
          "alias": "Time",
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "pattern": "Time",
          "type": "date"
        },
        {
          "alias": "",
          "colorMode": "row",
          "colors": [
            "#607d8b",
            "#78909c",
            "#90a4ae"
          ],
          "decimals": null,
          "pattern": "/.*/",
          "thresholds": [
            "30000",
            "500000"
          ],
          "type": "number",
          "unit": "locale"
        }
      ],
      "targets": [
        {
          "format": "table",
          "group": [],
          "hide": false,
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "select candidateName as \"Candidate Name\",totalVoteCount as \"Vote Count\", concat(round((totalVoteCount/($totalPolledValidOrdinaryVotes + $totalPolledRejectedOrdinaryVotes)*100),2),\"%\") AS '%' from (\nSELECT candidate.candidateName AS candidateName,SUM(dashboard_status_PRE_41.voteCount) AS totalVoteCount \nFROM dashboard_status_PRE_41 join candidate on dashboard_status_PRE_41.candidateId = candidate.candidateId\nWHERE electionId = \"$electionId\"\nAND status=\"Verified\"\nAND dashboard_status_PRE_41.candidateId IS NOT NULL\nGROUP BY dashboard_status_PRE_41.electionId,dashboard_status_PRE_41.candidateId\n) as t1\nORDER BY t1.totalVoteCount DESC",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "fileId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "file",
          "timeColumn": "fileCreatedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Accumulated Result  - Votes per candidate",
      "transform": "table",
      "type": "table"
    },
    {
      "cacheTimeout": null,
      "content": "# \n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 12,
        "y": 8
      },
      "id": 23,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "transparent": true,
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "content": "# Non Postal\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 15,
        "y": 8
      },
      "id": 24,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "content": "# Postal\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 18,
        "y": 8
      },
      "id": 25,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "content": "# Total\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 21,
        "y": 8
      },
      "id": 26,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "content": "# Electors\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 12,
        "y": 10
      },
      "id": 20,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#F2CC0C",
        "#d44a3a"
      ],
      "decimals": null,
      "format": "locale",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 15,
        "y": 10
      },
      "id": 47,
      "interval": "6h",
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "15588973",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- SELECT SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\n-- SELECT \n--       electoralDistrict.areaName as electoralDistrictName,\n--       electoralDistrict.areaId as electoralDistrictId,\n      \n--       pollingDivision.areaName as pollingDivisionName,\n--       pollingDivision.areaId as pollingDivisionId,\n      \n--       pollingStation.areaName as pollingStationName,\n-- \t  pollingStation.areaId as pollingStationId,\n--       sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n--       countingCentre.areaName as countingCentreName,\n--       countingCentre.areaId as countingCentreId,\n--       sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n--       countingCentreElection.voteType,\n--       countingCentreElection.electionId as countingCentreElectionId,\n--       election.electionId,\n--       election.electionName\n    \n--     FROM \n--       area countingCentre \n      \n--       left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n--       left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n--       left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n--       left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n--       left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n--       left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n--       inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n--       inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n--       inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n--       inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n--       inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n--       inner join election as election on election.electionId = countingCentreElection.parentElectionId\n--     WHERE \n--       countingCentre.areaType = \"CountingCentre\"\n--     AND countingCentreElection.voteType = \"NonPostal\"\n--     GROUP BY\n--       electoralDistrict.areaId,\n--       pollingDivision.areaId,\n--       countingCentre.areaId,\n--       pollingStation.areaId\n--       ) AS T1\n--     WHERE T1.electionName=\"$elections\"\n\nselect $totalRegisteredOrdinaryVoters \n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#F2CC0C",
        "#d44a3a"
      ],
      "format": "locale",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 18,
        "y": 10
      },
      "id": 11,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "404123",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- SELECT SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0))  AS value FROM (\n-- SELECT \n--       electoralDistrict.areaName as electoralDistrictName,\n--       electoralDistrict.areaId as electoralDistrictId,\n      \n--       pollingDivision.areaName as pollingDivisionName,\n--       pollingDivision.areaId as pollingDivisionId,\n      \n--       pollingStation.areaName as pollingStationName,\n-- \t  pollingStation.areaId as pollingStationId,\n--       sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n--       countingCentre.areaName as countingCentreName,\n--       countingCentre.areaId as countingCentreId,\n--       sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n--       countingCentreElection.voteType,\n--       election.electionName\n      \n--       -- districtCentre.areaName as districtCentreName,\n--       -- districtCentre.areaId as districtCentreId\n      \n    \n--     FROM \n--       area countingCentre \n      \n--       left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n--       left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n--       left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n--       left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n--       left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n--       left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n--       inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n--       inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n--       inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n--       inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n--       inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n--       inner join election as election on election.electionId = countingCentreElection.parentElectionId\n\n--     WHERE \n--       countingCentre.areaType = \"CountingCentre\"\n      \n--     GROUP BY\n--       electoralDistrict.areaId,\n--       pollingDivision.areaId,\n--       countingCentre.areaId,\n--       pollingStation.areaId\n--       ) AS T1\n--     WHERE T1.electoralDistrictName IN ($district)\n--     AND T1.electionName = \"$elections\"\nselect $totalRegisteredPostalVoters \n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#FADE2A",
        "#d44a3a"
      ],
      "format": "locale",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 21,
        "y": 10
      },
      "id": 29,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "15588973 + 404123",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "select $totalRegisteredOrdinaryVoters + $totalRegisteredPostalVoters\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "content": "# Polled\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 12,
        "y": 12
      },
      "id": 19,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeat": null,
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#3274D9",
        "#d44a3a"
      ],
      "format": "locale",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 15,
        "y": 12
      },
      "id": 15,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "1403448 + 59083",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "select $totalPolledValidOrdinaryVotes + $totalPolledRejectedOrdinaryVotes",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#3274D9",
        "#d44a3a"
      ],
      "format": "locale",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 18,
        "y": 12
      },
      "id": 18,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "26450 + 374",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "select $totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#1F60C4",
        "#d44a3a"
      ],
      "format": "locale",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 21,
        "y": 12
      },
      "id": 31,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "1403448 + 26450 + 59083 + 374",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- SELECT sum(voteCount) AS totalVoteCount FROM dashboard_status_PRE_41 \n-- WHERE electionName = \"$election\"\nselect $totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes + $totalPolledRejectedOrdinaryVotes + $totalPolledRejectedPostalVotes\n\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "content": "# %\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 12,
        "y": 14
      },
      "id": 27,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#56A64B",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 15,
        "y": 14
      },
      "id": 28,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "percentage",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- SELECT IF(totalRegisteredVots<>0 AND totalPolledVotes<>0,concat(round(( totalPolledVotes/totalRegisteredVots * 100 ))),0) AS percentage FROM(\n-- SELECT \n--   sum(IF(registered_postal_non_postal_votes_view.registeredOrdinaryVotersCount IS NOT NULL,registered_postal_non_postal_votes_view.registeredOrdinaryVotersCount,0)) AS totalRegisteredVots,\n--   sum(IF(pre_cc_wise_valid_vote_count.validVoteCount IS NOT NULL,pre_cc_wise_valid_vote_count.validVoteCount,0)+IF(pre_cc_wise_rejected_vote_count.rejectedVoteCount IS NOT NULL,pre_cc_wise_rejected_vote_count.rejectedVoteCount,0)) AS totalPolledVotes\n-- FROM registered_postal_non_postal_votes_view\n-- INNER JOIN pre_cc_wise_valid_vote_count ON\n-- registered_postal_non_postal_votes_view.countingCentreId=pre_cc_wise_valid_vote_count.countingCentreId\n-- INNER JOIN pre_cc_wise_rejected_vote_count ON\n-- registered_postal_non_postal_votes_view.countingCentreId=pre_cc_wise_rejected_vote_count.countingCentreId\n-- WHERE pre_cc_wise_valid_vote_count.electionName=\"$elections\"\n-- AND pre_cc_wise_valid_vote_count.electoralDistrictName IN ($district) \n-- AND pre_cc_wise_valid_vote_count.voteType = \"NonPostal\"\n-- -- AND pre_cc_wise_valid_vote_count.pollingDivisionName IN ($Polling_Division)\n-- )AS T1\n\nSELECT IF($totalRegisteredOrdinaryVoters<>0 AND ($totalPolledValidOrdinaryVotes + $totalPolledRejectedOrdinaryVotes)<>0,concat(round(( ($totalPolledValidOrdinaryVotes + $totalPolledRejectedOrdinaryVotes)/$totalRegisteredOrdinaryVoters * 100 ))),0) AS percentage \n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#56A64B",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 18,
        "y": 14
      },
      "id": 32,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "percentage",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- SELECT IF(totalRegisteredPostalVotes<>0 AND totalVoteCount<>0,concat(round(( totalVoteCount/totalRegisteredPostalVotes * 100 ))),0) AS percentage FROM(\n-- SELECT SUM(\n--         IF(pre_cc_wise_rejected_vote_count.rejectedVoteCount IS NOT NULL, pre_cc_wise_rejected_vote_count.rejectedVoteCount, 0) + \n--         IF(pre_cc_wise_valid_vote_count.validVoteCount IS NOT NULL, pre_cc_wise_valid_vote_count.validVoteCount, 0)\n--     ) AS totalVoteCount,\n--     SUM(IF(registered_postal_non_postal_votes_view.registeredPostalVotersCount IS NOT NULL,registered_postal_non_postal_votes_view.registeredPostalVotersCount,0)) AS totalRegisteredPostalVotes\n-- FROM \n--   pre_cc_wise_rejected_vote_count \n--   INNER JOIN pre_cc_wise_valid_vote_count ON\n--       pre_cc_wise_rejected_vote_count.countingCentreId=pre_cc_wise_valid_vote_count.countingCentreId\n-- \tINNER JOIN registered_postal_non_postal_votes_view ON\n--       pre_cc_wise_valid_vote_count.countingCentreId = registered_postal_non_postal_votes_view.countingCentreId\n--       WHERE pre_cc_wise_valid_vote_count.electionId=1\n--       and pre_cc_wise_rejected_vote_count.electoralDistrictName  IN ($district)\n--       and pre_cc_wise_valid_vote_count.voteType = \"Postal\"\n-- ) AS T1\n  SELECT IF($totalRegisteredPostalVoters<>0 AND ($totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes)<>0,concat(round(( ($totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes)/$totalRegisteredPostalVoters * 100 ))),0) AS percentage \n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#37872D",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 21,
        "y": 14
      },
      "id": 33,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "percentage",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- select sum(($totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes)/($totalRegisteredOrdinaryVoters + $totalRegisteredPostalVoters) * 100)\n SELECT IF(sum($totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes)<>0 AND sum($totalRegisteredOrdinaryVoters + $totalRegisteredPostalVoters)<>0,\n          (round(( ($totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes)/($totalRegisteredOrdinaryVoters + $totalRegisteredPostalVoters) * 100 ))),0) AS percentage \n\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "content": "# Valid\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 12,
        "y": 16
      },
      "id": 22,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorValue": true,
      "colors": [
        "#299c46",
        "rgba(237, 129, 40, 0.89)",
        "#d44a3a"
      ],
      "format": "locale",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 15,
        "y": 16
      },
      "id": 12,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "1403448",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- SELECT sum(voteCount) AS totalVoteCount FROM dashboard_status_PRE_41 \n-- WHERE voteType = \"Ordinary\" \n-- AND electionId = \"$electionId\" \n-- AND candidateId IS NOT NULL\nselect $totalPolledValidOrdinaryVotes",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorValue": true,
      "colors": [
        "#299c46",
        "rgba(237, 129, 40, 0.89)",
        "#d44a3a"
      ],
      "format": "locale",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 18,
        "y": 16
      },
      "id": 38,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "26450",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- SELECT sum(voteCount) AS totalVoteCount FROM dashboard_status_PRE_41 \n-- WHERE voteType = \"Postal\" \n-- AND electionId = \"$electionId\" \n-- AND candidateId IS NOT NULL\nselect $totalPolledValidPostalVotes",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorValue": true,
      "colors": [
        "#299c46",
        "rgba(237, 129, 40, 0.89)",
        "#d44a3a"
      ],
      "format": "locale",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 21,
        "y": 16
      },
      "id": 42,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "1403448 + 26450",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "select $totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "columns": [],
      "fontSize": "100%",
      "gridPos": {
        "h": 7,
        "w": 12,
        "x": 0,
        "y": 17
      },
      "id": 17,
      "links": [],
      "options": {},
      "pageSize": null,
      "scroll": true,
      "showHeader": true,
      "sort": {
        "col": 0,
        "desc": true
      },
      "styles": [
        {
          "alias": "Time",
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "pattern": "Time",
          "type": "date"
        },
        {
          "alias": "",
          "colorMode": "row",
          "colors": [
            "#80cbc4",
            "#4db6ac",
            "#26a69a"
          ],
          "decimals": null,
          "pattern": "/.*/",
          "thresholds": [
            "50",
            "80"
          ],
          "type": "number",
          "unit": "none"
        }
      ],
      "targets": [
        {
          "format": "table",
          "group": [],
          "hide": false,
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT area.areaname \n       AS \n       'Electoral District', \n       result4.areaname \n       AS 'Polling Division', \n       totalcountingcentres \n       AS 'Total Counting Centres', \n       completedcountingcentrecount \n       AS 'Completed Counting Centres', \n       Concat(Round(completedcountingcentrecount * 100 / totalcountingcentres,2), \n       '%') AS \n       'Completed %' \n  FROM (SELECT areaname, \n               pollingdivisionid, \n               totalcountingcentres, \n               completedcountingcentrecount, \n               ( totalcountingcentres - completedcountingcentrecount ) AS diff \n          FROM (SELECT areaname, \n                       pollingdivisionid, \n                       totalcountingcentres, \n                       completedcountingcentrecount, \n                       ( totalcountingcentres - completedcountingcentrecount ) \n                       AS diff \n                  FROM area \n                       LEFT JOIN (SELECT result.pollingdivisionid, \n                                         totalcountingcentres, \n                                         completedcountingcentrecount \n                                    FROM (SELECT pollingdivisionid, \n                                                 Count(countingcentreid) AS \n                                                 totalCountingCentres \n                                            FROM (SELECT pollingdivisionid, \n                                                         countingcentreid \n                                                    FROM area_map \n                                                   WHERE pollingdivisionid IS \n                                                         NOT NULL \n                                                   GROUP BY pollingdivisionid, \n                                                            countingcentreid) AS \n                                                 countingCentres \n                                           GROUP BY pollingdivisionid) AS result \n                                         LEFT JOIN (SELECT pollingdivisionid, \n                                         completedcountingcentrecount \n                                                      FROM \n                       (SELECT pollingdivisionid, \n                               Count(completedcountingcentreids) AS \n                               completedCountingCentreCount \n                          FROM \n                                 (SELECT \n               dashboard_status_CE_201.pollingdivisionid, \n               dashboard_status_CE_201.countingcentreid AS \n               completedCountingCentreIds \n                          FROM dashboard_status_CE_201 \n               LEFT JOIN dashboard_status_PRE_41 \n               ON \n               dashboard_status_CE_201.countingcentreid = \n               dashboard_status_PRE_41.countingcentreid \n                         WHERE \n               dashboard_status_CE_201.pollingdivisionid IS \n               NOT NULL \n               AND dashboard_status_CE_201.status = \n                   'verified' \n               AND dashboard_status_PRE_41.status = \n                   'verified' \n                         GROUP BY \n               dashboard_status_CE_201.countingcentreid) \n                       AS result \n                 GROUP BY pollingdivisionid) AS \n               orderedByPolling) AS \n               result1 \n               ON result1.pollingdivisionid = \n               result.pollingdivisionid) AS result2 \n               ON area.areaid = result2.pollingdivisionid \n                 WHERE pollingdivisionid IS NOT NULL) AS result3 \n         WHERE diff IS NOT NULL \n               AND diff != 0 \n         ORDER BY diff DESC \n         LIMIT 5) AS result4 \n       LEFT JOIN area_map \n              ON area_map.pollingdivisionid = result4.pollingdivisionid \n       LEFT JOIN area \n              ON area_map.electoraldistrictid = area.areaid \n GROUP BY electoraldistrictid ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "fileId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "file",
          "timeColumn": "fileCreatedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Polling divisions that are closest to finishing",
      "transform": "table",
      "type": "table"
    },
    {
      "cacheTimeout": null,
      "content": "# %\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 12,
        "y": 18
      },
      "id": 35,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#56A64B",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 15,
        "y": 18
      },
      "id": 34,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "percentage",
      "targets": [
        {
          "format": "table",
          "group": [],
          "hide": false,
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- select sum(($totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes)/($totalRegisteredOrdinaryVoters + $totalRegisteredPostalVoters) * 100)\n SELECT IF($totalPolledValidOrdinaryVotes<>0 AND sum($totalPolledValidOrdinaryVotes + $totalPolledRejectedOrdinaryVotes)<>0,\n          (round(($totalPolledValidOrdinaryVotes/($totalPolledValidOrdinaryVotes + $totalPolledRejectedOrdinaryVotes) * 100 ))),0) AS percentage \n\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#56A64B",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 18,
        "y": 18
      },
      "id": 39,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "percentage",
      "targets": [
        {
          "format": "table",
          "group": [],
          "hide": false,
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- select sum(($totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes)/($totalRegisteredOrdinaryVoters + $totalRegisteredPostalVoters) * 100)\n SELECT IF($totalPolledValidPostalVotes<>0 AND sum($totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes)<>0,\n          (round(( $totalPolledValidPostalVotes/($totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes) * 100 ))),0) AS percentage \n\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#37872D",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 21,
        "y": 18
      },
      "id": 43,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "percentage",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- select sum(($totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes)/($totalRegisteredOrdinaryVoters + $totalRegisteredPostalVoters) * 100)\n SELECT IF(sum($totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes)<>0 AND sum($totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes)<>0,\n          (round(( ($totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes)/($totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes) * 100 ))),0) AS percentage \n\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "content": "# Rejected\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 12,
        "y": 20
      },
      "id": 21,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#E02F44",
        "#d44a3a"
      ],
      "format": "locale",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 15,
        "y": 20
      },
      "id": 13,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "59083",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- SELECT sum(voteCount) AS totalVoteCount FROM dashboard_status_PRE_41 \n-- WHERE voteType = \"Ordinary\" \n-- AND electionId = \"$electionId\" \n-- AND candidateId IS NULL\nselect $totalPolledRejectedOrdinaryVotes",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#E02F44",
        "#d44a3a"
      ],
      "format": "locale",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 18,
        "y": 20
      },
      "id": 40,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "374",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- SELECT sum(voteCount) AS totalVoteCount FROM dashboard_status_PRE_41 \n-- WHERE voteType = \"Postal\" \n-- AND electionId = \"$electionId\" \n-- AND candidateId IS NULL\nselect $totalPolledRejectedPostalVotes",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#C4162A",
        "#d44a3a"
      ],
      "format": "locale",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 21,
        "y": 20
      },
      "id": 44,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "374 + 59083",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "select $totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "content": "# %\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 12,
        "y": 22
      },
      "id": 37,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#56A64B",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 15,
        "y": 22
      },
      "id": 36,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "percentage",
      "targets": [
        {
          "format": "table",
          "group": [],
          "hide": false,
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- select sum(($totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes)/($totalRegisteredOrdinaryVoters + $totalRegisteredPostalVoters) * 100)\n SELECT IF($totalPolledRejectedOrdinaryVotes<>0 AND sum($totalPolledValidOrdinaryVotes + $totalPolledRejectedOrdinaryVotes)<>0,\n         (round(($totalPolledRejectedOrdinaryVotes/($totalPolledValidOrdinaryVotes + $totalPolledRejectedOrdinaryVotes) * 100 ))),0) AS percentage \n\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#56A64B",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 18,
        "y": 22
      },
      "id": 41,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "percentage",
      "targets": [
        {
          "format": "table",
          "group": [],
          "hide": false,
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- select sum(($totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes)/($totalRegisteredOrdinaryVoters + $totalRegisteredPostalVoters) * 100)\n SELECT IF($totalPolledRejectedPostalVotes<>0 AND sum($totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes)<>0,\n         (round(( $totalPolledRejectedPostalVotes/($totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes) * 100 ))),0) AS percentage \n\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#37872D",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 21,
        "y": 22
      },
      "id": 45,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "percentage",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- select sum(($totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes)/($totalRegisteredOrdinaryVoters + $totalRegisteredPostalVoters) * 100)\n SELECT IF(sum($totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes)<>0 AND sum($totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes + + $totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes)<>0,\n         (round(( ($totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes)/($totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes + + $totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes) * 100 ))),0) AS percentage \n\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    }
  ],
  "refresh": "5s",
  "schemaVersion": 18,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "allValue": null,
        "current": {
          "text": "Presidential Election 2019 - System Test 5 [ EC ]",
          "value": "Presidential Election 2019 - System Test 5 [ EC ]"
        },
        "datasource": "MySQL",
        "definition": "SELECT electionName FROM election WHERE election.parentElectionId IS NULL",
        "hide": 0,
        "includeAll": false,
        "label": "Election",
        "multi": false,
        "name": "elections",
        "options": [],
        "query": "SELECT electionName FROM election WHERE election.parentElectionId IS NULL",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "12846",
          "value": "12846"
        },
        "datasource": "MySQL",
        "definition": "select count(DISTINCT pollingStationId) from area_map WHERE electionId=$electionId",
        "hide": 2,
        "includeAll": false,
        "label": "totalPollingStations",
        "multi": false,
        "name": "totalPollingStations",
        "options": [],
        "query": "select count(DISTINCT pollingStationId) from area_map WHERE electionId=$electionId",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "15588973",
          "value": "15588973"
        },
        "datasource": "MySQL",
        "definition": "select sum(pollingStation._registeredVotersCount) - $totalRegisteredPostalVoters from area_map    join election as election on election.electionId = area_map.electionId   join area as pollingStation on pollingStation.areaId = area_map.pollingStationId where area_map.voteType = \"NonPostal\" and election.electionName = \"$elections\"",
        "hide": 2,
        "includeAll": false,
        "label": "totalRegisteredOrdinaryVoters",
        "multi": false,
        "name": "totalRegisteredOrdinaryVoters",
        "options": [],
        "query": "select sum(pollingStation._registeredVotersCount) - $totalRegisteredPostalVoters from area_map    join election as election on election.electionId = area_map.electionId   join area as pollingStation on pollingStation.areaId = area_map.pollingStationId where area_map.voteType = \"NonPostal\" and election.electionName = \"$elections\"",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "1403448",
          "value": "1403448"
        },
        "datasource": "MySQL",
        "definition": "SELECT if(sum(voteCount) is null,0,sum(voteCount) ) AS totalVoteCount FROM dashboard_status_PRE_41  WHERE voteType = \"Ordinary\"  AND electionId = \"$electionId\" AND status=\"Verified\" AND candidateId IS NOT NULL",
        "hide": 2,
        "includeAll": false,
        "label": "totalPolledValidOrdinaryVotes",
        "multi": false,
        "name": "totalPolledValidOrdinaryVotes",
        "options": [],
        "query": "SELECT if(sum(voteCount) is null,0,sum(voteCount) ) AS totalVoteCount FROM dashboard_status_PRE_41  WHERE voteType = \"Ordinary\"  AND electionId = \"$electionId\" AND status=\"Verified\" AND candidateId IS NOT NULL",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "404123",
          "value": "404123"
        },
        "datasource": "MySQL",
        "definition": " select sum(countingCentre._registeredVotersCount) from area_map    join election as election on election.electionId = area_map.electionId   join area as countingCentre on countingCentre.areaId = area_map.countingCentreId where area_map.voteType = \"Postal\" and election.electionName = \"$elections\"",
        "hide": 2,
        "includeAll": false,
        "label": "totalRegisteredPostalVoters",
        "multi": false,
        "name": "totalRegisteredPostalVoters",
        "options": [],
        "query": " select sum(countingCentre._registeredVotersCount) from area_map    join election as election on election.electionId = area_map.electionId   join area as countingCentre on countingCentre.areaId = area_map.countingCentreId where area_map.voteType = \"Postal\" and election.electionName = \"$elections\"",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "59083",
          "value": "59083"
        },
        "datasource": "MySQL",
        "definition": "SELECT if(sum(voteCount) is null,0,sum(voteCount) ) AS totalVoteCount FROM dashboard_status_PRE_41  WHERE voteType = \"Ordinary\" AND status=\"Verified\" AND electionId = \"$electionId\"  AND candidateId IS NULL",
        "hide": 2,
        "includeAll": false,
        "label": "totalPolledRejectedOrdinaryVotes",
        "multi": false,
        "name": "totalPolledRejectedOrdinaryVotes",
        "options": [],
        "query": "SELECT if(sum(voteCount) is null,0,sum(voteCount) ) AS totalVoteCount FROM dashboard_status_PRE_41  WHERE voteType = \"Ordinary\" AND status=\"Verified\" AND electionId = \"$electionId\"  AND candidateId IS NULL",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "26450",
          "value": "26450"
        },
        "datasource": "MySQL",
        "definition": "SELECT if(sum(voteCount) is null,0,sum(voteCount) ) AS totalVoteCount FROM dashboard_status_PRE_41  WHERE voteType = \"Postal\" AND status=\"Verified\"  AND electionId = \"$electionId\"  AND candidateId IS NOT NULL",
        "hide": 2,
        "includeAll": false,
        "label": "totalPolledValidPostalVotes",
        "multi": false,
        "name": "totalPolledValidPostalVotes",
        "options": [],
        "query": "SELECT if(sum(voteCount) is null,0,sum(voteCount) ) AS totalVoteCount FROM dashboard_status_PRE_41  WHERE voteType = \"Postal\" AND status=\"Verified\"  AND electionId = \"$electionId\"  AND candidateId IS NOT NULL",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "374",
          "value": "374"
        },
        "datasource": "MySQL",
        "definition": "SELECT if(sum(voteCount) is null,0,sum(voteCount)) AS totalVoteCount FROM dashboard_status_PRE_41  WHERE voteType = \"Postal\"  AND electionId = \"$electionId\" AND status=\"Verified\"  AND candidateId IS NULL",
        "hide": 2,
        "includeAll": false,
        "label": "totalPolledRejectedPostalVotes",
        "multi": false,
        "name": "totalPolledRejectedPostalVotes",
        "options": [],
        "query": "SELECT if(sum(voteCount) is null,0,sum(voteCount)) AS totalVoteCount FROM dashboard_status_PRE_41  WHERE voteType = \"Postal\"  AND electionId = \"$electionId\" AND status=\"Verified\"  AND candidateId IS NULL",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "1",
          "value": "1"
        },
        "datasource": "MySQL",
        "definition": "select electionId from election where electionName = \"$elections\"",
        "hide": 2,
        "includeAll": false,
        "label": "electionId",
        "multi": false,
        "name": "electionId",
        "options": [],
        "query": "select electionId from election where electionName = \"$elections\"",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "370",
          "value": "370"
        },
        "datasource": "MySQL",
        "definition": "select count(DISTINCT countingCentreId) from area_map WHERE electionId=$electionId and voteType=\"Postal\"",
        "hide": 2,
        "includeAll": false,
        "label": "totalPostalCountingCentres",
        "multi": false,
        "name": "totalPostalCountingCentres",
        "options": [],
        "query": "select count(DISTINCT countingCentreId) from area_map WHERE electionId=$electionId and voteType=\"Postal\"",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "1179",
          "value": "1179"
        },
        "datasource": "MySQL",
        "definition": "select count(DISTINCT countingCentreId) from area_map WHERE electionId=$electionId and voteType=\"NonPostal\"",
        "hide": 2,
        "includeAll": false,
        "label": "OrdinaryCountingCentres",
        "multi": false,
        "name": "OrdinaryCountingCentres",
        "options": [],
        "query": "select count(DISTINCT countingCentreId) from area_map WHERE electionId=$electionId and voteType=\"NonPostal\"",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "160",
          "value": "160"
        },
        "datasource": "MySQL",
        "definition": "select count(DISTINCT pollingDivisionId) from area_map WHERE electionId=$electionId",
        "hide": 2,
        "includeAll": false,
        "label": "totalPollingDivisions",
        "multi": false,
        "name": "totalPollingDivisions",
        "options": [],
        "query": "select count(DISTINCT pollingDivisionId) from area_map WHERE electionId=$electionId",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "22",
          "value": "22"
        },
        "datasource": "MySQL",
        "definition": "select count(DISTINCT electoralDistrictId) from area_map WHERE electionId=$electionId",
        "hide": 2,
        "includeAll": false,
        "label": "totalElectoralDistricts",
        "multi": false,
        "name": "totalElectoralDistricts",
        "options": [],
        "query": "select count(DISTINCT electoralDistrictId) from area_map WHERE electionId=$electionId",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      }
    ]
  },
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "5s",
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ],
    "time_options": [
      "5m",
      "15m",
      "1h",
      "6h",
      "12h",
      "24h",
      "2d",
      "7d",
      "30d"
    ]
  },
  "timezone": "",
  "title": "National Results Status New Design",
  "uid": "i0uqvC0Zz",
  "version": 98
}