{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "gnetId": null,
  "graphTooltip": 0,
  "id": 11,
  "iteration": 1573451659047,
  "links": [],
  "panels": [
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": false,
      "colorValue": false,
      "colors": [
        "#299c46",
        "#8e24aa",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 1,
        "w": 14,
        "x": 0,
        "y": 0
      },
      "id": 66,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "200%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "Presidential Election 2019 - System Test 5 [ EC ]",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "select \"$elections\"\n\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "transparent": true,
      "type": "singlestat",
      "valueFontSize": "50%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "content": "# CE - 201 (PV)\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 14,
        "y": 0
      },
      "id": 46,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "rgba(237, 129, 40, 0.89)",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 6,
        "x": 18,
        "y": 0
      },
      "id": 10,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "CC",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT \n    concat(if(completedCountingCentres is null,0,completedCountingCentres),'/',totalCountingCentres,' - ',IF(totalCountingCentres<>0 AND completedCountingCentres<>0,concat(round(( completedCountingCentres/totalCountingCentres * 100 ))),0)) AS value \n    FROM (\n    SELECT \n        $PostalCountingCentres AS totalCountingCentres,\n        SUM(IF(status = \"Verified\",1,0)) AS completedCountingCentres\n    FROM (\n    SELECT \n        countingCentreId,\n        status\n    FROM dashboard_status_CE_201\n    WHERE electionId = \"$electionId\"\n    AND voteType = \"Postal\"\n    AND electoralDistrictId = \"$districtId\"\n    GROUP BY countingCentreId\n    ) AS T1\n    ) AS T2",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": false,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#8e24aa",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 3,
        "w": 14,
        "x": 0,
        "y": 1
      },
      "id": 49,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "200%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "09 - Hambantota",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "select \"$district\"\n\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "transparent": true,
      "type": "singlestat",
      "valueFontSize": "200%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "content": "# PRE - 41 (PV)\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 14,
        "y": 2
      },
      "id": 56,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "rgba(237, 129, 40, 0.89)",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 6,
        "x": 18,
        "y": 2
      },
      "id": 57,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "CC",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT \nconcat(if(completedCountingCentres is null,0,completedCountingCentres),'/',totalCountingCentres,' - ',IF(totalCountingCentres<>0 AND completedCountingCentres<>0,concat(round(( completedCountingCentres/totalCountingCentres * 100 ))),0)) AS value \nFROM (\nSELECT \n    $PostalCountingCentres AS totalCountingCentres,\n    SUM(IF(status = \"verified\",1,0)) AS completedCountingCentres\nFROM (\n    SELECT \n    countingCentreId,\n    status\n    FROM dashboard_status_PRE_41\n    WHERE electionId = \"$electionId\"\n    AND voteType = \"Postal\"\n    AND electoralDistrictId = \"$districtId\"\n    GROUP BY countingCentreId\n  ) AS counting_centre_wise_status\n) AS T1",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "content": "# CE - 201 \n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 0,
        "y": 4
      },
      "id": 50,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "rgba(237, 129, 40, 0.89)",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 7,
        "x": 4,
        "y": 4
      },
      "id": 53,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "PS",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- SELECT \n--     concat(completedPollingStations,'/',totalPollingStations,' - ',IF(totalPollingStations<>0 AND completedPollingStations<>0,concat(round(( completedPollingStations/totalPollingStations * 100 ))),0)) AS value FROM (\n--     SELECT \n--         COUNT(DISTINCT pollingStation) AS totalPollingStations,\n--         SUM(IF(status = \"verrified\",1,0)) AS completedPollingStations\n--     FROM dashboard_status_CE_201\n--     WHERE electionName = \"$elections\"\n--     AND electoralDistrict = \"$district\"\n--     AND voteType = \"Ordinary\"\n--     ) AS T1\nSELECT \n    concat(if(completedPollingStations is null,0,completedPollingStations),'/',totalPollingStations,' - ',IF(totalPollingStations<>0 AND completedPollingStations<>0,concat(round(( completedPollingStations/totalPollingStations * 100 ))),0)) AS value FROM (\n    SELECT \n        $totalPollingStations AS totalPollingStations,\n        SUM(IF(status = \"Verified\",1,0)) AS completedPollingStations\n    FROM dashboard_status_CE_201\n    WHERE electionId = \"$electionId\"\n    AND voteType = \"Ordinary\" AND electoralDistrictId = $districtId\n    ) AS T1\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "rgba(237, 129, 40, 0.89)",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 7,
        "x": 11,
        "y": 4
      },
      "id": 51,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "CC",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT \n    concat(if(completedCountingCentres is null,0,completedCountingCentres),'/',totalCountingCentres,' - ',IF(totalCountingCentres<>0 AND completedCountingCentres<>0,concat(round(( completedCountingCentres/totalCountingCentres * 100 ))),0)) AS value \n    FROM (\n    SELECT \n        $OrdinaryCountingCentres AS totalCountingCentres,\n        SUM(IF(status = \"Verified\",1,0)) AS completedCountingCentres\n    FROM (\n    SELECT \n        countingCentreId,\n        status\n    FROM dashboard_status_CE_201\n    WHERE electionId = \"$electionId\"\n    AND electoralDistrictId = \"$districtId\"\n    AND voteType = \"Ordinary\"\n    GROUP BY countingCentreId\n    ) AS T1\n    ) AS T2\n\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "rgba(237, 129, 40, 0.89)",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 6,
        "x": 18,
        "y": 4
      },
      "id": 52,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "PD",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- SELECT \n--     concat(if(completedPollingDivisions is null,0,completedPollingDivisions),'/',totalPollingDivisions,' - ',IF(totalPollingDivisions<>0 AND completedPollingDivisions<>0,concat(round(( completedPollingDivisions/totalPollingDivisions * 100 ))),0)) AS value \n--     FROM (\n--     SELECT \n--         $OrdinaryPollingDivisions AS totalPollingDivisions,\n--         SUM(IF(totalCountingCentres=completedCountingCentres,1,0)) AS completedPollingDivisions\n--         FROM (\n--         SELECT \n--         $OrdinaryCountingCentres AS totalCountingCentres,\n--         SUM(IF(status = \"Verified\",1,0)) AS completedCountingCentres\n--     FROM (\n--     SELECT \n--         countingCentreId,\n--         status\n--         FROM dashboard_status_CE_201\n--     WHERE electionId = \"$electionId\"\n--     AND voteType = \"Ordinary\"\n--     AND electoralDistrictId = \"$districtId\"\n--     GROUP BY countingCentreId\n--     ) AS T1\n--     ) AS T2\n--     ) AS T3\n\n\nSELECT\n      concat(if(completedPollingDivisions is null,0,completedPollingDivisions),'/',$OrdinaryPollingDivisions,' - ',IF($OrdinaryPollingDivisions<>0 AND completedPollingDivisions<>0,concat(round(( completedPollingDivisions/$OrdinaryPollingDivisions * 100 ))),0)) AS value \nFROM\n  (\n    SELECT\n      SUM(IF(notCompletedCountingCentres = 0, 1, 0)) as completedPollingDivisions\n    FROM\n      (\n        SELECT \n          pollingDivision.*,\n          SUM(IF(status = \"Verified\",0,1)) as notCompletedCountingCentres\n        FROM \n          dashboard_status_CE_201\n          join area_map on area_map.countingCentreId = dashboard_status_CE_201.countingCentreId\n          join area as pollingDivision on pollingDivision.areaId = area_map.pollingDivisionId\n        WHERE \n          dashboard_status_CE_201.electionId = \"$electionId\"\n          AND dashboard_status_CE_201.voteType = \"Ordinary\"\n          AND dashboard_status_CE_201.electoralDistrictId = \"$districtId\"\n        GROUP BY\n          area_map.pollingDivisionId\n      ) as pollingDivision201Status\n    ) as pollingDivision201Summary",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "content": "# PRE - 41\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 0,
        "y": 6
      },
      "id": 61,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "rgba(237, 129, 40, 0.89)",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 7,
        "x": 4,
        "y": 6
      },
      "id": 64,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "PS",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT \n    concat(completedPollingStations,'/',totalPollingStations,' - ',IF(totalPollingStations<>0 AND completedPollingStations<>0,concat(round(( completedPollingStations/totalPollingStations * 100 ))),0)) AS value FROM (\n    SELECT $totalPollingStations AS totalPollingStations,COUNT(pollingstationid) AS completedPollingStations\nFROM   (SELECT countingcentreid \n        FROM   `dashboard_status_PRE_41` \n        WHERE  status = \"verified\" AND electoralDistrictId = $districtId\n        GROUP  BY countingcentreid) AS countingCentres \n       LEFT JOIN area_map \n              ON countingCentres.countingcentreid = area_map.countingcentreid \n    ) AS T1\n\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "rgba(237, 129, 40, 0.89)",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 7,
        "x": 11,
        "y": 6
      },
      "id": 62,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "CC",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT \nconcat(if(completedCountingCentres is null,0,completedCountingCentres),'/',totalCountingCentres,' - ',IF(totalCountingCentres<>0 AND completedCountingCentres<>0,concat(round(( completedCountingCentres/totalCountingCentres * 100 ))),0)) AS value \nFROM (\nSELECT \n    $OrdinaryCountingCentres AS totalCountingCentres,\n    SUM(IF(status = \"Verified\",1,0)) AS completedCountingCentres\nFROM (\n    SELECT \n    countingCentreId,\n    status\n    FROM dashboard_status_PRE_41\n    WHERE electionId = \"$electionId\"\n    AND voteType = \"Ordinary\"\n    AND electoralDistrictId = \"$districtId\"\n    GROUP BY countingCentreId\n  ) AS counting_centre_wise_status\n) AS T1",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "rgba(237, 129, 40, 0.89)",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 6,
        "x": 18,
        "y": 6
      },
      "id": 63,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "PD",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- SELECT \n-- concat(if(completedPollingDivisions is null,0,completedPollingDivisions),'/',totalPollingDivisions,' - ',IF(totalPollingDivisions<>0 AND completedPollingDivisions<>0,concat(round(( completedPollingDivisions/totalPollingDivisions * 100 ))),0)) AS value \n-- FROM (\n--     SELECT \n--     $OrdinaryPollingDivisions AS totalPollingDivisions,\n--     SUM(IF(totalCountingCentres=completedCountingCentres,1,0)) AS completedPollingDivisions\n--     FROM (\n--     SELECT \n--     $OrdinaryCountingCentres AS totalCountingCentres,\n--     SUM(IF(status = \"Verified\",1,0)) AS completedCountingCentres,\n--     pollingDivisionId\n-- FROM (\n--     SELECT \n--     countingCentreId,\n--     status,\n--     pollingDivisionId\n--     FROM dashboard_status_PRE_41\n--     WHERE electionId = \"$electionId\"\n--     AND voteType = \"Ordinary\"\n--     AND electoralDistrictId = \"$districtId\"\n--     GROUP BY countingCentreId\n--     ) AS counting_centre_wise_status\n--     ) AS T1 GROUP BY pollingDivisionId\n--     ) AS T2\n\nSELECT\n      concat(if(completedPollingDivisions is null,0,completedPollingDivisions),'/',$OrdinaryPollingDivisions,' - ',IF($OrdinaryPollingDivisions<>0 AND completedPollingDivisions<>0,concat(round(( completedPollingDivisions/$OrdinaryPollingDivisions * 100 ))),0)) AS value \nFROM\n  (\n    SELECT\n      SUM(IF(notCompletedCountingCentres = 0, 1, 0)) as completedPollingDivisions\n    FROM\n      (\n        SELECT \n          pollingDivision.*,\n          SUM(IF(status = \"Verified\",0,1)) as notCompletedCountingCentres\n        FROM \n          dashboard_status_PRE_41\n          join area_map on area_map.countingCentreId = dashboard_status_PRE_41.countingCentreId\n          join area as pollingDivision on pollingDivision.areaId = area_map.pollingDivisionId\n        WHERE \n          dashboard_status_PRE_41.electionId = \"$electionId\"\n          AND dashboard_status_PRE_41.electoralDistrictId = \"$districtId\"\n          AND dashboard_status_PRE_41.voteType = \"Ordinary\"\n        GROUP BY\n          area_map.pollingDivisionId\n      ) as pollingDivision201Status\n    ) as pollingDivision201Summary",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "content": "# \n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 0,
        "y": 8
      },
      "id": 65,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "transparent": true,
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "content": "# Non Postal\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 3,
        "y": 8
      },
      "id": 24,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "content": "# Postal\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 7,
        "y": 8
      },
      "id": 25,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "content": "# Total\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 11,
        "y": 8
      },
      "id": 26,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "columns": [],
      "fontSize": "120%",
      "gridPos": {
        "h": 7,
        "w": 9,
        "x": 15,
        "y": 8
      },
      "id": 8,
      "links": [],
      "options": {},
      "pageSize": null,
      "scroll": true,
      "showHeader": true,
      "sort": {
        "col": null,
        "desc": false
      },
      "styles": [
        {
          "alias": "Time",
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "pattern": "Time",
          "type": "date"
        },
        {
          "alias": "",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "decimals": 2,
          "pattern": "/.*/",
          "thresholds": [],
          "type": "number",
          "unit": "locale"
        }
      ],
      "targets": [
        {
          "format": "table",
          "group": [],
          "hide": false,
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "select candidateName as \"Candidate Name\",totalVoteCount as \"Vote Count\", concat(round((totalVoteCount/($totalPolledValidOrdinaryVotes + $totalPolledRejectedOrdinaryVotes)*100),2),\"%\") AS '%' from (\nSELECT candidate.candidateName AS candidateName,SUM(dashboard_status_PRE_41.voteCount) AS totalVoteCount \nFROM dashboard_status_PRE_41 join candidate on dashboard_status_PRE_41.candidateId = candidate.candidateId\nWHERE electionId = \"$electionId\"\nAND electoralDistrictId = \"$districtId\"\nAND status=\"Verified\"\nAND dashboard_status_PRE_41.candidateId IS NOT NULL\nGROUP BY dashboard_status_PRE_41.electionId,dashboard_status_PRE_41.candidateId\n) as t1\nORDER BY t1.totalVoteCount DESC",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "fileId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "file",
          "timeColumn": "fileCreatedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "District Results  - Votes per candidate",
      "transform": "table",
      "type": "table"
    },
    {
      "cacheTimeout": null,
      "content": "# Electors\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 0,
        "y": 10
      },
      "id": 20,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": false,
      "colorPrefix": false,
      "colorValue": true,
      "colors": [
        "#d44a3a",
        "#FADE2A",
        "#299c46"
      ],
      "decimals": null,
      "format": "locale",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 3,
        "y": 10
      },
      "id": 47,
      "interval": "1800m",
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "100%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "485786",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- SELECT IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0)  AS value FROM (\n-- SELECT \n--       electoralDistrict.areaName as electoralDistrictName,\n--       electoralDistrict.areaId as electoralDistrictId,\n      \n--       pollingDivision.areaName as pollingDivisionName,\n--       pollingDivision.areaId as pollingDivisionId,\n      \n--       pollingStation.areaName as pollingStationName,\n-- \t  pollingStation.areaId as pollingStationId,\n--       sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n--       countingCentre.areaName as countingCentreName,\n--       countingCentre.areaId as countingCentreId,\n--       sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n--       countingCentreElection.voteType,\n--       countingCentreElection.electionId as countingCentreElectionId,\n--       election.electionId,\n--       election.electionName\n    \n--     FROM \n--       area countingCentre \n      \n--       left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n--       left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n--       left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n--       left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n--       left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n--       left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n--       inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n--       inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n--       inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n--       inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n--       inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n--       inner join election as election on election.electionId = countingCentreElection.parentElectionId\n--     WHERE \n--       countingCentre.areaType = \"CountingCentre\"\n--     GROUP BY\n--       electoralDistrict.areaId,\n--       pollingDivision.areaId,\n--       countingCentre.areaId,\n--       pollingStation.areaId\n--       ) AS T1\n--     WHERE T1.electoralDistrictName = \"$district\"\n--     AND T1.electionName=\"$elections\"\n\nselect $totalRegisteredOrdinaryVoters\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "120%",
      "valueMaps": [
        {
          "op": "=",
          "text": "0",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": false,
      "colorPrefix": false,
      "colorValue": true,
      "colors": [
        "#B877D9",
        "#F2CC0C",
        "#299c46"
      ],
      "format": "locale",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 7,
        "y": 10
      },
      "id": 11,
      "interval": "",
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "val",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "select $totalRegisteredPostalVoters as val",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "120%",
      "valueMaps": [
        {
          "op": "=",
          "text": "0",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": false,
      "colorPrefix": false,
      "colorValue": true,
      "colors": [
        "#B877D9",
        "#E0B400",
        "#299c46"
      ],
      "format": "locale",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 11,
        "y": 10
      },
      "id": 29,
      "interval": "",
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "485786 + 19535",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "select $totalRegisteredOrdinaryVoters + $totalRegisteredPostalVoters\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "120%",
      "valueMaps": [
        {
          "op": "=",
          "text": "0",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "content": "# Polled\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 0,
        "y": 12
      },
      "id": 19,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeat": null,
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#3274D9",
        "#d44a3a"
      ],
      "format": "locale",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 3,
        "y": 12
      },
      "id": 15,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "60477 + 4106",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- SELECT sum(voteCount) AS totalVoteCount FROM dashboard_status_PRE_41 \n-- WHERE voteType = \"Ordinary\" \n-- AND electoralDistrictId = \"$districtId\"\n-- AND electionId = \"$electionId\"\n-- select $totalPolledValidOrdinaryVotes + $totalPolledRejectedOrdinaryVotes\n-- SELECT sum(voteCount) AS totalVoteCount FROM dashboard_status_PRE_41 \n-- WHERE voteType = \"Ordinary\"  AND electoralDistrictId = $districtId AND electionId = $electionId\n\nselect $totalPolledValidOrdinaryVotes + $totalPolledRejectedOrdinaryVotes\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "120%",
      "valueMaps": [
        {
          "op": "=",
          "text": "0",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": false,
      "colorPrefix": false,
      "colorValue": true,
      "colors": [
        "#B877D9",
        "#3274D9",
        "#299c46"
      ],
      "format": "locale",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 7,
        "y": 12
      },
      "id": 18,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "0 + 0",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- SELECT sum(voteCount) AS totalVoteCount FROM dashboard_status_PRE_41 \n-- WHERE voteType = \"Postal\" \n-- AND electoralDistrictName = \"$district\"\n-- AND electionName = \"$election\"\nselect $totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "120%",
      "valueMaps": [
        {
          "op": "=",
          "text": "0",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#1F60C4",
        "#d44a3a"
      ],
      "format": "locale",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 11,
        "y": 12
      },
      "id": 31,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "60477 + 0 + 0 + 4106",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": " select $totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "120%",
      "valueMaps": [
        {
          "op": "=",
          "text": "0",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "content": "# %\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 0,
        "y": 14
      },
      "id": 27,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#56A64B",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 3,
        "y": 14
      },
      "id": 28,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "120%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "percentage",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- SELECT IF(totalRegisteredVots<>0 AND totalPolledVotes<>0,concat(round(( totalPolledVotes/totalRegisteredVots * 100 ))),0) AS percentage FROM(\n-- SELECT \n--   sum(IF(registered_postal_non_postal_votes_view.registeredOrdinaryVotersCount IS NOT NULL,registered_postal_non_postal_votes_view.registeredOrdinaryVotersCount,0)) AS totalRegisteredVots,\n--   sum(IF(pre_cc_wise_valid_vote_count.validVoteCount IS NOT NULL,pre_cc_wise_valid_vote_count.validVoteCount,0)+IF(pre_cc_wise_rejected_vote_count.rejectedVoteCount IS NOT NULL,pre_cc_wise_rejected_vote_count.rejectedVoteCount,0)) AS totalPolledVotes\n-- FROM registered_postal_non_postal_votes_view\n-- INNER JOIN pre_cc_wise_valid_vote_count ON\n-- registered_postal_non_postal_votes_view.countingCentreId=pre_cc_wise_valid_vote_count.countingCentreId\n-- INNER JOIN pre_cc_wise_rejected_vote_count ON\n-- registered_postal_non_postal_votes_view.countingCentreId=pre_cc_wise_rejected_vote_count.countingCentreId\n-- WHERE pre_cc_wise_valid_vote_count.electionName=\"$elections\"\n-- AND pre_cc_wise_valid_vote_count.electoralDistrictName = \"$district\" \n-- AND pre_cc_wise_valid_vote_count.pollingDivisionName IN ($Polling_Division)\n-- )AS T1\nSELECT IF($totalRegisteredOrdinaryVoters<>0 AND ($totalPolledValidOrdinaryVotes + $totalPolledRejectedOrdinaryVotes)<>0,concat(round(( ($totalPolledValidOrdinaryVotes + $totalPolledRejectedOrdinaryVotes)/$totalRegisteredOrdinaryVoters * 100 ))),0) AS percentage \n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "120%",
      "valueMaps": [
        {
          "op": "=",
          "text": "0",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorPrefix": false,
      "colorValue": true,
      "colors": [
        "#B877D9",
        "#56A64B",
        "#299c46"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 7,
        "y": 14
      },
      "id": 32,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "120%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "percentage",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- SELECT IF(totalRegisteredPostalVotes<>0 AND totalVoteCount<>0,concat(round(( totalVoteCount/totalRegisteredPostalVotes * 100 ))),0) AS percentage FROM(\n-- SELECT SUM(\n--         IF(pre_cc_wise_rejected_vote_count.rejectedVoteCount IS NOT NULL, pre_cc_wise_rejected_vote_count.rejectedVoteCount, 0) + \n--         IF(pre_cc_wise_valid_vote_count.validVoteCount IS NOT NULL, pre_cc_wise_valid_vote_count.validVoteCount, 0)\n--     ) AS totalVoteCount,\n--     SUM(IF(registered_postal_non_postal_votes_view.registeredPostalVotersCount IS NOT NULL,registered_postal_non_postal_votes_view.registeredPostalVotersCount,0)) AS totalRegisteredPostalVotes\n-- FROM \n--   pre_cc_wise_rejected_vote_count \n--   INNER JOIN pre_cc_wise_valid_vote_count ON\n--       pre_cc_wise_rejected_vote_count.countingCentreId=pre_cc_wise_valid_vote_count.countingCentreId\n-- \tINNER JOIN registered_postal_non_postal_votes_view ON\n--       pre_cc_wise_valid_vote_count.countingCentreId = registered_postal_non_postal_votes_view.countingCentreId\n--       WHERE pre_cc_wise_valid_vote_count.electionId=1\n--       and pre_cc_wise_rejected_vote_count.electoralDistrictName  = \"$district\"\n--       and pre_cc_wise_valid_vote_count.voteType = \"Postal\"\n-- ) AS T1\n  SELECT IF($totalRegisteredPostalVoters<>0 AND ($totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes)<>0,concat(round(( ($totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes)/$totalRegisteredPostalVoters * 100 ))),0) AS percentage \n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "120%",
      "valueMaps": [
        {
          "op": "=",
          "text": "0",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#37872D",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 11,
        "y": 14
      },
      "id": 33,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "120%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "percentage",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- select sum(($totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes)/($totalRegisteredOrdinaryVoters + $totalRegisteredPostalVoters) * 100)\n SELECT IF(sum($totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes)<>0 AND sum($totalRegisteredOrdinaryVoters + $totalRegisteredPostalVoters)<>0,\n          (round(( ($totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes)/($totalRegisteredOrdinaryVoters + $totalRegisteredPostalVoters) * 100 ))),0) AS percentage \n\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "120%",
      "valueMaps": [
        {
          "op": "=",
          "text": "0",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "columns": [],
      "fontSize": "110%",
      "gridPos": {
        "h": 9,
        "w": 9,
        "x": 15,
        "y": 15
      },
      "id": 17,
      "links": [],
      "options": {},
      "pageSize": null,
      "scroll": true,
      "showHeader": true,
      "sort": {
        "col": null,
        "desc": false
      },
      "styles": [
        {
          "alias": "Time",
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "pattern": "Time",
          "type": "date"
        },
        {
          "alias": "",
          "colorMode": "row",
          "colors": [
            "#7b1fa2",
            "#8e24aa",
            "#9c27b0"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": null,
          "mappingType": 1,
          "pattern": "/.*/",
          "thresholds": [
            "50",
            "80"
          ],
          "type": "number",
          "unit": "none"
        }
      ],
      "targets": [
        {
          "format": "table",
          "group": [],
          "hide": false,
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT  \n       result4.areaname             AS 'Polling Division', \n       totalcountingcentres         AS 'Total CC', \n       completedcountingcentrecount AS 'Completed CC', \n       Concat(Round(completedcountingcentrecount * 100 / totalcountingcentres, 2 \n              ), '%') \n                                    AS 'Completed %' \n  FROM (SELECT areaname, \n               pollingdivisionid, \n               totalcountingcentres, \n               completedcountingcentrecount, \n               ( totalcountingcentres - completedcountingcentrecount ) AS diff \n          FROM (SELECT areaname, \n                       pollingdivisionid, \n                       totalcountingcentres, \n                       completedcountingcentrecount, \n                       ( totalcountingcentres - completedcountingcentrecount ) \n                       AS diff \n                  FROM area \n                       LEFT JOIN (SELECT result.pollingdivisionid, \n                                         totalcountingcentres, \n                                         completedcountingcentrecount \n                                    FROM (SELECT pollingdivisionid, \n                                                 Count(countingcentreid) AS \n                                                 totalCountingCentres \n                                            FROM (SELECT pollingdivisionid, \n                                                         countingcentreid \n                                                    FROM area_map \n                                                   WHERE pollingdivisionid IS \n                                                         NOT NULL \n                                                   GROUP BY pollingdivisionid, \n                                                            countingcentreid) AS \n                                                 countingCentres \n                                           GROUP BY pollingdivisionid) AS result \n                                         LEFT JOIN (SELECT pollingdivisionid, \n                                         completedcountingcentrecount \n                                                      FROM \n                       (SELECT pollingdivisionid, \n                               Count(completedcountingcentreids) AS \n                               completedCountingCentreCount \n                          FROM \n                                 (SELECT \n               dashboard_status_CE_201.pollingdivisionid, \n               dashboard_status_CE_201.countingcentreid AS \n               completedCountingCentreIds \n                          FROM dashboard_status_CE_201 \n               LEFT JOIN dashboard_status_PRE_41 \n               ON \n               dashboard_status_CE_201.countingcentreid = \n               dashboard_status_PRE_41.countingcentreid \n                         WHERE \n               dashboard_status_CE_201.pollingdivisionid IS \n               NOT NULL \n               AND dashboard_status_CE_201.status = \n                   'verified' \n               AND dashboard_status_PRE_41.status = \n                   'verified' \n                         GROUP BY \n               dashboard_status_CE_201.countingcentreid) \n                       AS result \n                 GROUP BY pollingdivisionid) AS \n               orderedByPolling) AS \n               result1 \n               ON result1.pollingdivisionid = \n               result.pollingdivisionid) AS result2 \n               ON area.areaid = result2.pollingdivisionid \n                 WHERE pollingdivisionid IS NOT NULL) AS result3 \n         WHERE diff IS NOT NULL \n               AND diff != 0 \n         ORDER BY diff DESC \n         LIMIT 5) AS result4 \n       LEFT JOIN area_map \n              ON area_map.pollingdivisionid = result4.pollingdivisionid \n       LEFT JOIN area \n              ON area_map.electoraldistrictid = area.areaid WHERE area_map.electoraldistrictid = $districtId\n GROUP BY electoraldistrictid ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "fileId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "file",
          "timeColumn": "fileCreatedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Polling divisions that are closest to finish by cc",
      "transform": "table",
      "type": "table"
    },
    {
      "cacheTimeout": null,
      "content": "# Valid\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 0,
        "y": 16
      },
      "id": 22,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": false,
      "colorPrefix": false,
      "colorValue": true,
      "colors": [
        "#B877D9",
        "#A352CC",
        "#299c46"
      ],
      "format": "locale",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 3,
        "y": 16
      },
      "id": 12,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "60477",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- SELECT NOW() AS time, SUM(IF(T1.validVoteCount IS NOT NULL, T1.validVoteCount, 0)) AS value FROM (\n-- SELECT \n--   candidate.candidateId, \n--   candidate.candidateName, \n--   subElection.voteType,\n--   cc_ed_pd_postal_and_non_postal.electoralDistrictId,\n--   cc_ed_pd_postal_and_non_postal.electoralDistrictName,\n--   cc_ed_pd_postal_and_non_postal.pollingDivisionId,\n--   cc_ed_pd_postal_and_non_postal.pollingDivisionName,\n--   cc_ed_pd_postal_and_non_postal.countingCentreId,\n--   cc_ed_pd_postal_and_non_postal.countingCentreName,\n--   sum(tallySheetVersionRow_PRE_41.count) as validVoteCount\n--   FROM\n--   cc_ed_pd_postal_and_non_postal_view cc_ed_pd_postal_and_non_postal\n--   join election as election on election.electionId = cc_ed_pd_postal_and_non_postal.electionId\n--   join election as subElection on subElection.parentElectionId = election.electionId and subElection.electionId = cc_ed_pd_postal_and_non_postal.countingCentreElectionId\n--   join election_party on election_party.electionId = election.electionId\n--   join party on party.partyId = election_party.partyId\n--   join election_candidate on election_candidate.electionId = election.electionId and election_candidate.partyId = party.partyId\n--   join candidate on candidate.candidateId = election_candidate.candidateId\n  \n  \n--   left join submission on submission.areaId = cc_ed_pd_postal_and_non_postal.countingCentreId and submission.electionId = subElection.electionId\n--   left join tallySheet on tallySheet.tallySheetId = submission.submissionId and tallySheet.tallySheetCode = \"PRE_41\"\n--   left join submissionVersion as latestSubmissionVersion on latestSubmissionVersion.submissionId = submission.submissionId and latestSubmissionVersion.submissionVersionId = submission.latestVersionId\n  \n--   left join tallySheetVersionRow_PRE_41 on tallySheetVersionRow_PRE_41.tallySheetVersionId = latestSubmissionVersion.submissionVersionId and tallySheetVersionRow_PRE_41.candidateId = candidate.candidateId\n\n\n-- WHERE\n--   election.electionName = \"$elections\"\n-- GROUP BY\n--   cc_ed_pd_postal_and_non_postal.electoralDistrictId,\n--   cc_ed_pd_postal_and_non_postal.pollingDivisionId\n-- ) AS T1\n-- WHERE T1.electoralDistrictName = \"$district\"\n-- AND T1.pollingDivisionName IN ($Polling_Division)\n\nselect $totalPolledValidOrdinaryVotes",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "120%",
      "valueMaps": [
        {
          "op": "=",
          "text": "0",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": false,
      "colorPrefix": false,
      "colorValue": true,
      "colors": [
        "#B877D9",
        "#A352CC",
        "#299c46"
      ],
      "format": "locale",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 7,
        "y": 16
      },
      "id": 38,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "0",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- SELECT sum(voteCount) AS totalVoteCount FROM dashboard_status_PRE_41 \n-- WHERE voteType = \"Postal\" \n-- AND electionName = \"$election\" \n-- AND electoralDistrictName = \"$district\"\n-- AND candidateId IS NOT NULL\nselect $totalPolledValidPostalVotes",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "120%",
      "valueMaps": [
        {
          "op": "=",
          "text": "0",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": false,
      "colorPrefix": false,
      "colorValue": true,
      "colors": [
        "#B877D9",
        "#8F3BB8",
        "#299c46"
      ],
      "format": "locale",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 11,
        "y": 16
      },
      "id": 42,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "60477 + 0",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "select $totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "120%",
      "valueMaps": [
        {
          "op": "=",
          "text": "0",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "content": "# %\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 0,
        "y": 18
      },
      "id": 35,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorPrefix": true,
      "colorValue": true,
      "colors": [
        "#B877D9",
        "#56A64B",
        "#E02F44"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 3,
        "y": 18
      },
      "id": 34,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "120%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "percentage",
      "targets": [
        {
          "format": "table",
          "group": [],
          "hide": false,
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- SELECT IF(totalValidVots<>0 AND totalPolledVotes<>0,concat(round(( totalValidVots/totalPolledVotes * 100 ))),0) AS percentage FROM(\n-- SELECT \n--   sum(IF(pre_cc_wise_valid_vote_count.validVoteCount IS NOT NULL,pre_cc_wise_valid_vote_count.validVoteCount,0)) AS totalValidVots,\n--   sum(IF(pre_cc_wise_valid_vote_count.validVoteCount IS NOT NULL,pre_cc_wise_valid_vote_count.validVoteCount,0)+IF(pre_cc_wise_rejected_vote_count.rejectedVoteCount IS NOT NULL,pre_cc_wise_rejected_vote_count.rejectedVoteCount,0)) AS totalPolledVotes\n-- FROM pre_cc_wise_valid_vote_count\n-- INNER JOIN pre_cc_wise_rejected_vote_count ON\n-- pre_cc_wise_valid_vote_count.countingCentreId=pre_cc_wise_rejected_vote_count.countingCentreId\n-- WHERE pre_cc_wise_valid_vote_count.electionName=\"$elections\"\n-- AND pre_cc_wise_valid_vote_count.electoralDistrictName = \"$district\" \n-- AND pre_cc_wise_valid_vote_count.pollingDivisionName IN ($Polling_Division)\n-- ) AS T1\n SELECT IF($totalPolledValidOrdinaryVotes<>0 AND sum($totalPolledValidOrdinaryVotes + $totalPolledRejectedOrdinaryVotes)<>0,\n          (round(($totalPolledValidOrdinaryVotes/($totalPolledValidOrdinaryVotes + $totalPolledRejectedOrdinaryVotes) * 100 ))),0) AS percentage \n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "120%",
      "valueMaps": [
        {
          "op": "=",
          "text": "0",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorPrefix": true,
      "colorValue": true,
      "colors": [
        "#B877D9",
        "#56A64B",
        "#E02F44"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 7,
        "y": 18
      },
      "id": 39,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "120%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "percentage",
      "targets": [
        {
          "format": "table",
          "group": [],
          "hide": false,
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- SELECT IF(totalValidVots<>0 AND totalPolledVotes<>0,concat(round(( totalValidVots/totalPolledVotes * 100 ))),0) AS percentage FROM(\n-- SELECT \n--   sum(IF(pre_cc_wise_valid_vote_count.validVoteCount IS NOT NULL,pre_cc_wise_valid_vote_count.validVoteCount,0)) AS totalValidVots,\n--   sum(IF(pre_cc_wise_valid_vote_count.validVoteCount IS NOT NULL,pre_cc_wise_valid_vote_count.validVoteCount,0)+IF(pre_cc_wise_rejected_vote_count.rejectedVoteCount IS NOT NULL,pre_cc_wise_rejected_vote_count.rejectedVoteCount,0)) AS totalPolledVotes\n-- FROM pre_cc_wise_valid_vote_count\n-- INNER JOIN pre_cc_wise_rejected_vote_count ON\n-- pre_cc_wise_valid_vote_count.countingCentreId=pre_cc_wise_rejected_vote_count.countingCentreId\n-- WHERE pre_cc_wise_valid_vote_count.electionName=\"$elections\"\n-- AND pre_cc_wise_valid_vote_count.electoralDistrictName = \"$district\" \n-- AND pre_cc_wise_valid_vote_count.voteType = \"Postal\"\n-- ) AS T1\n SELECT IF($totalPolledValidPostalVotes<>0 AND sum($totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes)<>0,\n          (round(( $totalPolledValidPostalVotes/($totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes) * 100 ))),0) AS percentage \n\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "120%",
      "valueMaps": [
        {
          "op": "=",
          "text": "0",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#37872D",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 11,
        "y": 18
      },
      "id": 43,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "120%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "percentage",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- select sum(($totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes)/($totalRegisteredOrdinaryVoters + $totalRegisteredPostalVoters) * 100)\n SELECT IF(sum($totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes)<>0 AND sum($totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes)<>0,\n          (round(( ($totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes)/($totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes) * 100 ))),0) AS percentage \n\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "120%",
      "valueMaps": [
        {
          "op": "=",
          "text": "0",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "content": "# Rejected\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 0,
        "y": 20
      },
      "id": 21,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": false,
      "colorPrefix": false,
      "colorValue": true,
      "colors": [
        "#B877D9",
        "#FF7383",
        "#FF9830"
      ],
      "format": "locale",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 3,
        "y": 20
      },
      "id": 13,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "4106",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- SELECT  SUM(IF(T1.rejectedVoteCount IS NOT NULL, T1.rejectedVoteCount, 0)) AS value FROM (\n-- SELECT \n--   subElection.voteType,\n--   cc_ed_pd_postal_and_non_postal.electoralDistrictId,\n--   cc_ed_pd_postal_and_non_postal.electoralDistrictName,\n--   cc_ed_pd_postal_and_non_postal.pollingDivisionId,\n--   cc_ed_pd_postal_and_non_postal.pollingDivisionName,\n--   cc_ed_pd_postal_and_non_postal.countingCentreId,\n--   cc_ed_pd_postal_and_non_postal.countingCentreName,\n--   sum(tallySheetVersionRow_RejectedVoteCount.rejectedVoteCount) as rejectedVoteCount\n\n-- FROM\n\n--   (\n--     SELECT \n--         electoralDistrict.areaName as electoralDistrictName,\n--         electoralDistrict.areaId as electoralDistrictId,\n        \n--         pollingDivision.areaName as pollingDivisionName,\n--         pollingDivision.areaId as pollingDivisionId,\n        \n--         -- pollingDistrict.areaName as pollingDistrictName,\n--         -- pollingDistrict.areaId as pollingDistrictId,\n        \n--         -- pollingStation.areaName as pollingStationName,\n--         -- pollingStation.areaId as pollingStationId,\n        \n--         countingCentre.areaName as countingCentreName,\n--         countingCentre.areaId as countingCentreId,\n--         countingCentreElection.voteType,\n--         countingCentreElection.electionId as countingCentreElectionId,\n--         country.electionId\n        \n--         -- districtCentre.areaName as districtCentreName,\n--         -- districtCentre.areaId as districtCentreId\n        \n      \n--       FROM \n--         area countingCentre \n        \n--         left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n--         left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n        \n--         left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n--         left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n        \n--         left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n--         left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n        \n--         inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n--         inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n        \n--         inner join area_area as countryMapping on  countryMapping.childAreaId = electoralDistrict.areaId\n--         inner join area as country on country.areaId = countryMapping.parentAreaId and country.areaType = \"Country\"\n        \n--         inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n--         inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n        \n--         inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n--       WHERE \n--         countingCentre.areaType = \"CountingCentre\"\n        \n--       GROUP BY\n--         electoralDistrict.areaId,\n--         pollingDivision.areaId,\n--         countingCentre.areaId\n--   ) as cc_ed_pd_postal_and_non_postal\n  \n--   join election as election on election.electionId = cc_ed_pd_postal_and_non_postal.electionId\n--   join election as subElection on subElection.parentElectionId = election.electionId and subElection.electionId = cc_ed_pd_postal_and_non_postal.countingCentreElectionId\n\n  \n--   left join submission on submission.areaId = cc_ed_pd_postal_and_non_postal.countingCentreId and submission.electionId = subElection.electionId\n--   left join tallySheet on tallySheet.tallySheetId = submission.submissionId and tallySheet.tallySheetCode = \"PRE_41\"\n--   left join submissionVersion as latestSubmissionVersion on latestSubmissionVersion.submissionId = submission.submissionId and latestSubmissionVersion.submissionVersionId = submission.latestVersionId\n  \n--   left join tallySheetVersionRow_RejectedVoteCount on tallySheetVersionRow_RejectedVoteCount.tallySheetVersionId = latestSubmissionVersion.submissionVersionId and tallySheetVersionRow_RejectedVoteCount.candidateId IS NULL\n\n\n-- WHERE\n--   election.electionName = \"$elections\"\n-- GROUP BY\n--   cc_ed_pd_postal_and_non_postal.electoralDistrictId,\n--   cc_ed_pd_postal_and_non_postal.pollingDivisionId,\n--   cc_ed_pd_postal_and_non_postal.countingCentreId,\n--   subElection.electionId\n-- ) AS T1\n-- WHERE T1.electoralDistrictName = \"$district\" \n-- AND T1.pollingDivisionName IN ($Polling_Division)\nselect $totalPolledRejectedOrdinaryVotes\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "120%",
      "valueMaps": [
        {
          "op": "=",
          "text": "0",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": false,
      "colorPrefix": false,
      "colorValue": true,
      "colors": [
        "#B877D9",
        "#FF7383",
        "#299c46"
      ],
      "format": "locale",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 7,
        "y": 20
      },
      "id": 40,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "0",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- select SUM(\n--         IF(pre_cc_wise_rejected_vote_count.rejectedVoteCount IS NOT NULL, pre_cc_wise_rejected_vote_count.rejectedVoteCount, 0)\n--     ) AS totalVoteCount\n-- from \n--   pre_cc_wise_rejected_vote_count \n--   inner join pre_cc_wise_valid_vote_count on \n--       pre_cc_wise_rejected_vote_count.countingCentreId=pre_cc_wise_valid_vote_count.countingCentreId\n--       where pre_cc_wise_valid_vote_count.electionName=\"$elections\"\n--       and pre_cc_wise_rejected_vote_count.electoralDistrictName = \"$district\"\n--       and pre_cc_wise_valid_vote_count.voteType = \"Postal\"\nselect $totalPolledRejectedPostalVotes",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "120%",
      "valueMaps": [
        {
          "op": "=",
          "text": "0",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": false,
      "colorPrefix": false,
      "colorValue": true,
      "colors": [
        "#B877D9",
        "#E02F44",
        "#299c46"
      ],
      "format": "locale",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 11,
        "y": 20
      },
      "id": 44,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "",
      "postfixFontSize": "50%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "0 + 4106",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "select $totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "120%",
      "valueMaps": [
        {
          "op": "=",
          "text": "0",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "content": "# %\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 3,
        "x": 0,
        "y": 22
      },
      "id": 37,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorPrefix": true,
      "colorValue": true,
      "colors": [
        "#B877D9",
        "#56A64B",
        "#E02F44"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 3,
        "y": 22
      },
      "id": 36,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "120%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "percentage",
      "targets": [
        {
          "format": "table",
          "group": [],
          "hide": false,
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- SELECT IF(totalRejectedVots<>0 AND totalPolledVotes<>0,concat(round(( totalRejectedVots/totalPolledVotes * 100 ))),0) AS percentage FROM(\n-- SELECT \n--   sum(IF(pre_cc_wise_rejected_vote_count.rejectedVoteCount IS NOT NULL,pre_cc_wise_rejected_vote_count.rejectedVoteCount,0)) AS totalRejectedVots,\n--   sum(IF(pre_cc_wise_valid_vote_count.validVoteCount IS NOT NULL,pre_cc_wise_valid_vote_count.validVoteCount,0)+IF(pre_cc_wise_rejected_vote_count.rejectedVoteCount IS NOT NULL,pre_cc_wise_rejected_vote_count.rejectedVoteCount,0)) AS totalPolledVotes\n-- FROM pre_cc_wise_valid_vote_count\n-- INNER JOIN pre_cc_wise_rejected_vote_count ON\n-- pre_cc_wise_valid_vote_count.countingCentreId=pre_cc_wise_rejected_vote_count.countingCentreId\n-- WHERE pre_cc_wise_valid_vote_count.electionName=\"$elections\"\n-- AND pre_cc_wise_valid_vote_count.electoralDistrictName = \"$district\" \n-- AND pre_cc_wise_valid_vote_count.pollingDivisionName IN ($Polling_Division)\n-- ) AS T1\n SELECT IF($totalPolledRejectedOrdinaryVotes<>0 AND sum($totalPolledValidOrdinaryVotes + $totalPolledRejectedOrdinaryVotes)<>0,\n         (round(($totalPolledRejectedOrdinaryVotes/($totalPolledValidOrdinaryVotes + $totalPolledRejectedOrdinaryVotes) * 100 ))),0) AS percentage \n\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "120%",
      "valueMaps": [
        {
          "op": "=",
          "text": "0",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorPrefix": true,
      "colorValue": true,
      "colors": [
        "#B877D9",
        "#56A64B",
        "#E02F44"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 7,
        "y": 22
      },
      "id": 41,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "120%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "percentage",
      "targets": [
        {
          "format": "table",
          "group": [],
          "hide": false,
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- SELECT IF(totalRejectedVots<>0 AND totalPolledVotes<>0,concat(round(( totalRejectedVots/totalPolledVotes * 100 ))),0) AS percentage FROM(\n-- SELECT \n--   sum(IF(pre_cc_wise_rejected_vote_count.rejectedVoteCount IS NOT NULL,pre_cc_wise_rejected_vote_count.rejectedVoteCount,0)) AS totalRejectedVots,\n--   sum(IF(pre_cc_wise_valid_vote_count.validVoteCount IS NOT NULL,pre_cc_wise_valid_vote_count.validVoteCount,0)+IF(pre_cc_wise_rejected_vote_count.rejectedVoteCount IS NOT NULL,pre_cc_wise_rejected_vote_count.rejectedVoteCount,0)) AS totalPolledVotes\n-- FROM pre_cc_wise_valid_vote_count\n-- INNER JOIN pre_cc_wise_rejected_vote_count ON\n-- pre_cc_wise_valid_vote_count.countingCentreId=pre_cc_wise_rejected_vote_count.countingCentreId\n-- WHERE pre_cc_wise_valid_vote_count.electionName=\"$elections\"\n-- AND pre_cc_wise_valid_vote_count.electoralDistrictName = \"$district\" \n-- AND pre_cc_wise_valid_vote_count.voteType = \"Postal\"\n-- ) AS T1\n SELECT IF($totalPolledRejectedPostalVotes<>0 AND sum($totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes)<>0,\n         (round(( $totalPolledRejectedPostalVotes/($totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes) * 100 ))),0) AS percentage \n\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "120%",
      "valueMaps": [
        {
          "op": "=",
          "text": "0",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorPrefix": false,
      "colorValue": true,
      "colors": [
        "#B877D9",
        "#37872D",
        "#299c46"
      ],
      "format": "locale",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 11,
        "y": 22
      },
      "id": 45,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "120%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "percentage",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "-- select sum(($totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes + $totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes)/($totalRegisteredOrdinaryVoters + $totalRegisteredPostalVoters) * 100)\n SELECT IF(sum($totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes)<>0 AND sum($totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes + + $totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes)<>0,\n         (round(( ($totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes)/($totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes + + $totalPolledRejectedPostalVotes + $totalPolledRejectedOrdinaryVotes) * 100 ))),0) AS percentage \n\n\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "120%",
      "valueMaps": [
        {
          "op": "=",
          "text": "0",
          "value": "null"
        }
      ],
      "valueName": "avg"
    }
  ],
  "refresh": "5s",
  "schemaVersion": 18,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "allValue": null,
        "current": {
          "text": "Presidential Election 2019 - System Test 5 [ EC ]",
          "value": "Presidential Election 2019 - System Test 5 [ EC ]"
        },
        "datasource": "MySQL",
        "definition": "SELECT electionName FROM election WHERE election.parentElectionId IS NULL",
        "hide": 0,
        "includeAll": false,
        "label": "Election",
        "multi": false,
        "name": "elections",
        "options": [],
        "query": "SELECT electionName FROM election WHERE election.parentElectionId IS NULL",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "09 - Hambantota",
          "value": "09 - Hambantota"
        },
        "datasource": "MySQL",
        "definition": "SELECT areaName  FROM area WHERE areaType=\"ElectoralDistrict\"",
        "hide": 0,
        "includeAll": false,
        "label": "District",
        "multi": false,
        "name": "district",
        "options": [],
        "query": "SELECT areaName  FROM area WHERE areaType=\"ElectoralDistrict\"",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "All",
          "value": "$__all"
        },
        "datasource": "MySQL",
        "definition": "select DISTINCT `areaName` from area where areaType='PollingDivision' union SELECT null as `areaName`;",
        "hide": 2,
        "includeAll": true,
        "label": "Polling Division",
        "multi": true,
        "name": "Polling_Division",
        "options": [],
        "query": "select DISTINCT `areaName` from area where areaType='PollingDivision' union SELECT null as `areaName`;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "413",
          "value": "413"
        },
        "datasource": "MySQL",
        "definition": "SELECT if(COUNT(*) is null,0,COUNT(*) ) FROM area_map WHERE electoralDIstrictId=$districtId and pollingStationId is not null;",
        "hide": 2,
        "includeAll": false,
        "label": "totalPollingStations",
        "multi": false,
        "name": "totalPollingStations",
        "options": [],
        "query": "SELECT if(COUNT(*) is null,0,COUNT(*) ) FROM area_map WHERE electoralDIstrictId=$districtId and pollingStationId is not null;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "485786",
          "value": "485786"
        },
        "datasource": "MySQL",
        "definition": "SELECT SUM(pollingStation._registeredVotersCount) FROM area_map join area as pollingStation on pollingStation.areaId = area_map.pollingStationId WHERE electoralDistrictId=$districtId and area_map.electionId=$electionId;",
        "hide": 2,
        "includeAll": false,
        "label": "totalRegisteredOrdinaryVoters",
        "multi": false,
        "name": "totalRegisteredOrdinaryVoters",
        "options": [],
        "query": "SELECT SUM(pollingStation._registeredVotersCount) FROM area_map join area as pollingStation on pollingStation.areaId = area_map.pollingStationId WHERE electoralDistrictId=$districtId and area_map.electionId=$electionId;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "60477",
          "value": "60477"
        },
        "datasource": "MySQL",
        "definition": "SELECT  if(sum(voteCount) is null,0,sum(voteCount)) AS totalVoteCount FROM dashboard_status_PRE_41  WHERE voteType = \"Ordinary\"  AND electionId = \"$electionId\" AND status=\"Verified\" AND electoralDistrictId = $districtId  AND candidateId IS NOT NULL",
        "hide": 2,
        "includeAll": false,
        "label": "totalPolledValidOrdinaryVotes",
        "multi": false,
        "name": "totalPolledValidOrdinaryVotes",
        "options": [],
        "query": "SELECT  if(sum(voteCount) is null,0,sum(voteCount)) AS totalVoteCount FROM dashboard_status_PRE_41  WHERE voteType = \"Ordinary\"  AND electionId = \"$electionId\" AND status=\"Verified\" AND electoralDistrictId = $districtId  AND candidateId IS NOT NULL",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "19535",
          "value": "19535"
        },
        "datasource": "MySQL",
        "definition": "SELECT SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0))  AS value FROM ( SELECT        electoralDistrict.areaName as electoralDistrictName,       electoralDistrict.areaId as electoralDistrictId,              pollingDivision.areaName as pollingDivisionName,       pollingDivision.areaId as pollingDivisionId,              pollingStation.areaName as pollingStationName, \t  pollingStation.areaId as pollingStationId,       sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,              countingCentre.areaName as countingCentreName,       countingCentre.areaId as countingCentreId,       sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,              countingCentreElection.voteType,       election.electionName                        FROM        area countingCentre               left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId       left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"              left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId       left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"              left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId       left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"              inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )       inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"              inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId       inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"              inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId       inner join election as election on election.electionId = countingCentreElection.parentElectionId      WHERE        countingCentre.areaType = \"CountingCentre\"            GROUP BY       electoralDistrict.areaId,       pollingDivision.areaId,       countingCentre.areaId,       pollingStation.areaId       ) AS T1     WHERE T1.electoralDistrictName = \"$district\"     AND T1.electionName = \"$elections\"",
        "hide": 2,
        "includeAll": false,
        "label": "totalRegisteredPostalVoters",
        "multi": false,
        "name": "totalRegisteredPostalVoters",
        "options": [],
        "query": "SELECT SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0))  AS value FROM ( SELECT        electoralDistrict.areaName as electoralDistrictName,       electoralDistrict.areaId as electoralDistrictId,              pollingDivision.areaName as pollingDivisionName,       pollingDivision.areaId as pollingDivisionId,              pollingStation.areaName as pollingStationName, \t  pollingStation.areaId as pollingStationId,       sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,              countingCentre.areaName as countingCentreName,       countingCentre.areaId as countingCentreId,       sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,              countingCentreElection.voteType,       election.electionName                        FROM        area countingCentre               left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId       left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"              left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId       left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"              left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId       left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"              inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )       inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"              inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId       inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"              inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId       inner join election as election on election.electionId = countingCentreElection.parentElectionId      WHERE        countingCentre.areaType = \"CountingCentre\"            GROUP BY       electoralDistrict.areaId,       pollingDivision.areaId,       countingCentre.areaId,       pollingStation.areaId       ) AS T1     WHERE T1.electoralDistrictName = \"$district\"     AND T1.electionName = \"$elections\"",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "4106",
          "value": "4106"
        },
        "datasource": "MySQL",
        "definition": "SELECT  if(sum(voteCount) is null,0,sum(voteCount))  AS totalVoteCount FROM dashboard_status_PRE_41  WHERE voteType = \"Ordinary\"  AND electionId = \"$electionId\"  AND status=\"Verified\"  AND electoralDistrictId = $districtId AND candidateId IS NULL",
        "hide": 2,
        "includeAll": false,
        "label": "totalPolledRejectedOrdinaryVotes",
        "multi": false,
        "name": "totalPolledRejectedOrdinaryVotes",
        "options": [],
        "query": "SELECT  if(sum(voteCount) is null,0,sum(voteCount))  AS totalVoteCount FROM dashboard_status_PRE_41  WHERE voteType = \"Ordinary\"  AND electionId = \"$electionId\"  AND status=\"Verified\"  AND electoralDistrictId = $districtId AND candidateId IS NULL",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "0",
          "value": "0"
        },
        "datasource": "MySQL",
        "definition": "SELECT  if(sum(voteCount) is null,0,sum(voteCount))  AS totalVoteCount FROM dashboard_status_PRE_41  WHERE voteType = \"Postal\"  AND electionId = \"$electionId\"  AND status=\"Verified\"  AND electoralDistrictId = $districtId AND candidateId IS NOT NULL",
        "hide": 2,
        "includeAll": false,
        "label": "totalPolledValidPostalVotes",
        "multi": false,
        "name": "totalPolledValidPostalVotes",
        "options": [],
        "query": "SELECT  if(sum(voteCount) is null,0,sum(voteCount))  AS totalVoteCount FROM dashboard_status_PRE_41  WHERE voteType = \"Postal\"  AND electionId = \"$electionId\"  AND status=\"Verified\"  AND electoralDistrictId = $districtId AND candidateId IS NOT NULL",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "0",
          "value": "0"
        },
        "datasource": "MySQL",
        "definition": "SELECT  if(sum(voteCount) is null,0,sum(voteCount))  AS totalVoteCount FROM dashboard_status_PRE_41  WHERE voteType = \"Postal\"  AND electionId = \"$electionId\"  AND electoralDistrictId = $districtId  AND status=\"Verified\" AND candidateId IS NULL",
        "hide": 2,
        "includeAll": false,
        "label": "totalPolledRejectedPostalVotes",
        "multi": false,
        "name": "totalPolledRejectedPostalVotes",
        "options": [],
        "query": "SELECT  if(sum(voteCount) is null,0,sum(voteCount))  AS totalVoteCount FROM dashboard_status_PRE_41  WHERE voteType = \"Postal\"  AND electionId = \"$electionId\"  AND electoralDistrictId = $districtId  AND status=\"Verified\" AND candidateId IS NULL",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "12227",
          "value": "12227"
        },
        "datasource": "MySQL",
        "definition": "SELECT areaId  FROM area WHERE areaType=\"ElectoralDistrict\" AND areaName=\"$district\"",
        "hide": 2,
        "includeAll": false,
        "label": "districtId",
        "multi": false,
        "name": "districtId",
        "options": [],
        "query": "SELECT areaId  FROM area WHERE areaType=\"ElectoralDistrict\" AND areaName=\"$district\"",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "30",
          "value": "30"
        },
        "datasource": "MySQL",
        "definition": "SELECT COUNT(DISTINCT countingCentreId) from area_map WHERE electoralDistrictId=$districtId and voteType=\"NonPostal\";",
        "hide": 2,
        "includeAll": false,
        "label": "OrdinaryCountingCentres",
        "multi": false,
        "name": "OrdinaryCountingCentres",
        "options": [],
        "query": "SELECT COUNT(DISTINCT countingCentreId) from area_map WHERE electoralDistrictId=$districtId and voteType=\"NonPostal\";",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "1",
          "value": "1"
        },
        "datasource": "MySQL",
        "definition": "select electionId from election where electionName = \"$elections\"",
        "hide": 2,
        "includeAll": false,
        "label": "electionId",
        "multi": false,
        "name": "electionId",
        "options": [],
        "query": "select electionId from election where electionName = \"$elections\"",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "12",
          "value": "12"
        },
        "datasource": "MySQL",
        "definition": "SELECT COUNT(DISTINCT countingCentreId) from area_map WHERE electoralDistrictId=$districtId and voteType=\"Postal\";",
        "hide": 2,
        "includeAll": false,
        "label": "PostalCountingCentres",
        "multi": false,
        "name": "PostalCountingCentres",
        "options": [],
        "query": "SELECT COUNT(DISTINCT countingCentreId) from area_map WHERE electoralDistrictId=$districtId and voteType=\"Postal\";",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "12",
          "value": "12"
        },
        "datasource": "MySQL",
        "definition": "SELECT COUNT(*) FROM area_map WHERE electoralDIstrictId=$districtId and voteType=\"Postal\";",
        "hide": 2,
        "includeAll": false,
        "label": "totalPollingStationsPostal",
        "multi": false,
        "name": "totalPollingStationsPostal",
        "options": [],
        "query": "SELECT COUNT(*) FROM area_map WHERE electoralDIstrictId=$districtId and voteType=\"Postal\";",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "4",
          "value": "4"
        },
        "datasource": "MySQL",
        "definition": "SELECT COUNT(DISTINCT pollingDivisionId) from area_map WHERE electoralDistrictId=$districtId and voteType=\"NonPostal\";",
        "hide": 2,
        "includeAll": false,
        "label": "OrdinaryPollingDivisions",
        "multi": false,
        "name": "OrdinaryPollingDivisions",
        "options": [],
        "query": "SELECT COUNT(DISTINCT pollingDivisionId) from area_map WHERE electoralDistrictId=$districtId and voteType=\"NonPostal\";",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      }
    ]
  },
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "5s",
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ],
    "time_options": [
      "5m",
      "15m",
      "1h",
      "6h",
      "12h",
      "24h",
      "2d",
      "7d",
      "30d"
    ]
  },
  "timezone": "",
  "title": "District Results Status New Design",
  "uid": "6CQ3Xj0Wk",
  "version": 45
}