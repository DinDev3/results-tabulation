{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "gnetId": null,
  "graphTooltip": 0,
  "id": 5,
  "iteration": 1573618218055,
  "links": [],
  "panels": [
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#A352CC",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 8,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": " - Unofficial Results ( Preferential )",
      "postfixFontSize": "80%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false,
        "ymax": null,
        "ymin": null
      },
      "tableColumn": "Presidential Election 2019 - System Test  [ LSF 1 ]",
      "targets": [
        {
          "format": "table",
          "group": [],
          "hide": false,
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "select \"$elections\"",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "stampId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "stamp",
          "timeColumn": "createdAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "columns": [],
      "fontSize": "200%",
      "gridPos": {
        "h": 6,
        "w": 24,
        "x": 0,
        "y": 2
      },
      "id": 85,
      "links": [],
      "options": {},
      "pageSize": null,
      "scroll": true,
      "showHeader": true,
      "sort": {
        "col": null,
        "desc": false
      },
      "styles": [
        {
          "alias": "Time",
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "pattern": "Time",
          "type": "date"
        },
        {
          "alias": "",
          "colorMode": "row",
          "colors": [
            "#90a4ae",
            "#78909c",
            "#607d8b"
          ],
          "decimals": null,
          "pattern": "/.*/",
          "thresholds": [
            "50",
            "80"
          ],
          "type": "number",
          "unit": "locale"
        }
      ],
      "targets": [
        {
          "format": "table",
          "group": [],
          "hide": false,
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "(SELECT candidateName as \"Candidate Name\",\n      totalVoteCount as \"1st Preference\", \n      sum(secondPreferenceCount) AS \"2nd Preference\",\n      sum(thirdPreferenceCount) AS \"3rd Preference\",\n      (totalVoteCount + if(secondPreferenceCount is null,0,secondPreferenceCount) + if(thirdPreferenceCount is null,0,thirdPreferenceCount)) AS Total\n      from (\nSELECT dashboard_status_PRE_41.candidateId,candidate.candidateName AS candidateName,SUM(dashboard_status_PRE_41.voteCount) AS totalVoteCount \nFROM dashboard_status_PRE_41 join candidate on dashboard_status_PRE_41.candidateId = candidate.candidateId\nWHERE dashboard_status_PRE_41.electionId = \"$electionId\"\nAND dashboard_status_PRE_41.candidateId IS NOT NULL\nGROUP BY dashboard_status_PRE_41.electionId,dashboard_status_PRE_41.candidateId\n) as t1 LEFT JOIN dashboard_status_PRE_34 ON t1.candidateId = dashboard_status_PRE_34.candidateId\njoin election_candidate on election_candidate.candidateId = dashboard_status_PRE_34.candidateId and election_candidate.electionId = \"$electionId\"\nAND election_candidate.qualifiedForPreferences = 1\n\nGROUP BY t1.candidateId\nORDER BY totalVoteCount DESC\nLIMIT 2)\n-- UNION \n-- SELECT 'Others',\n--         $totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes - $top5CandidateVoteCount1stPref,\n--         ' ',\n--         ' ',\n--         $totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes - $top5CandidateVoteCount1stPref,\n--         concat(round((($totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes - $top5CandidateVoteCount1stPref )/($totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes + $totalPolledRejectedOrdinaryVotes + $totalPolledRejectedPostalVotes)*100),2),\"%\")\n-- UNION \n-- SELECT 'Total',\n--         $totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes,\n--         $top5CandidateVoteCount2ndPref,\n--         $top5CandidateVoteCount3rdPref,\n--         $totalPolledValidOrdinaryVotes + $totalPolledValidPostalVotes + $top5CandidateVoteCount2ndPref - $top5CandidateVoteCount3rdPref,\n--         \"100%\"\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "fileId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "file",
          "timeColumn": "fileCreatedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "transform": "table",
      "type": "table"
    },
    {
      "cacheTimeout": null,
      "content": "\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 0,
        "y": 8
      },
      "id": 79,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "transparent": true,
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "content": "\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 4,
        "y": 8
      },
      "id": 80,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "transparent": true,
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "content": "\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 8,
        "y": 8
      },
      "id": 81,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "transparent": true,
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "content": "\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 12,
        "y": 8
      },
      "id": 82,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "transparent": true,
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "content": "\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 16,
        "y": 8
      },
      "id": 83,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "transparent": true,
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "content": "\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 20,
        "y": 8
      },
      "id": 84,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "transparent": true,
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "content": "# Based on\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 0,
        "y": 10
      },
      "id": 67,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "content": "\n<h1 align=\"center\" style=\"text-align:center\" >PS</h1>\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 4,
        "y": 10
      },
      "id": 48,
      "links": [],
      "mode": "html",
      "options": {},
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType,\n      countingCentreElection.electionId\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     AND T1.electionId=1 \n\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "content": "\n<h1 align=\"center\" style=\"text-align:center\" >CC</h1>\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 8,
        "y": 10
      },
      "id": 49,
      "links": [],
      "mode": "html",
      "options": {},
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType,\n      countingCentreElection.electionId\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     AND T1.electionId=1 \n\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "content": "\n<h1 align=\"center\" style=\"text-align:center\" >PD</h1>\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 12,
        "y": 10
      },
      "id": 70,
      "links": [],
      "mode": "html",
      "options": {},
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType,\n      countingCentreElection.electionId\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     AND T1.electionId=1 \n\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "content": "\n<h1 align=\"center\" style=\"text-align:center\" >Postal CC</h1>\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 16,
        "y": 10
      },
      "id": 77,
      "links": [],
      "mode": "html",
      "options": {},
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType,\n      countingCentreElection.electionId\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     AND T1.electionId=1 \n\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "content": "\n<h1 align=\"center\" style=\"text-align:center\" >ED</h1>\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 20,
        "y": 10
      },
      "id": 71,
      "links": [],
      "mode": "html",
      "options": {},
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType,\n      countingCentreElection.electionId\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     AND T1.electionId=1 \n\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "content": "# Entered\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 0,
        "y": 12
      },
      "id": 61,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "rgba(237, 129, 40, 0.89)",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 4,
        "y": 12
      },
      "id": 73,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "70%",
      "prefix": "",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT \n    concat(completedPollingStations,'/',totalPollingStations,' - ',IF(totalPollingStations<>0 AND completedPollingStations<>0,concat(round(( completedPollingStations/totalPollingStations * 100 ))),0)) AS value FROM (\n    SELECT $totalPollingStations AS totalPollingStations,COUNT(pollingstationid) AS completedPollingStations\nFROM   (SELECT countingcentreid \n        FROM   `dashboard_status_PRE_34` \n        WHERE  (status = \"Submitted\" OR status = \"Entered\")\n        AND electionId = \"$electionId\"\n        GROUP  BY countingcentreid) AS countingCentres \n      LEFT JOIN area_map \n              ON countingCentres.countingcentreid = area_map.countingcentreid \n    ) AS T1\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "70%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#56A64B",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 8,
        "y": 12
      },
      "id": 74,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "70%",
      "prefix": "",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT \nconcat(if(completedCountingCentres is null,0,completedCountingCentres),'/',totalCountingCentres,' - ',IF(totalCountingCentres<>0 AND completedCountingCentres<>0,concat(round(( completedCountingCentres/totalCountingCentres * 100 ))),0)) AS value \nFROM (\nSELECT \n    $OrdinaryCountingCentres AS totalCountingCentres,\n    SUM(IF(status = \"Submitted\" OR status = \"Entered\",1,0)) AS completedCountingCentres\nFROM (\n    SELECT \n    countingCentreId,\n    status\n    FROM dashboard_status_PRE_34\n    WHERE electionId = \"$electionId\"\n    AND voteType = \"Ordinary\"\n    GROUP BY countingCentreId\n  ) AS counting_centre_wise_status\n) AS T1",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "70%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#A352CC",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 12,
        "y": 12
      },
      "id": 75,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "70%",
      "prefix": "",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT\n      concat(if(completedPollingDivisions is null,0,completedPollingDivisions),'/',$totalPollingDivisions,' - ',IF($totalPollingDivisions<>0 AND completedPollingDivisions<>0,concat(round(( completedPollingDivisions/$totalPollingDivisions * 100 ))),0)) AS value \nFROM\n  (\n    SELECT\n      SUM(IF(notCompletedCountingCentres = 0, 1, 0)) as completedPollingDivisions\n    FROM\n      (\n        SELECT \n          pollingDivision.*,\n          SUM(IF(status = \"Submitted\" OR status = \"Entered\",0,1)) as notCompletedCountingCentres\n        FROM \n          dashboard_status_PRE_34\n          join area_map on area_map.countingCentreId = dashboard_status_PRE_34.countingCentreId\n          join area as pollingDivision on pollingDivision.areaId = area_map.pollingDivisionId\n        WHERE \n          dashboard_status_PRE_34.electionId = \"$electionId\"\n          AND dashboard_status_PRE_34.voteType = \"Ordinary\"\n        GROUP BY\n          area_map.pollingDivisionId\n      ) as pollingDivision201Status\n    ) as pollingDivision201Summary",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "70%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#F2CC0C",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 16,
        "y": 12
      },
      "id": 55,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "70%",
      "prefix": "",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT \nconcat(if(completedCountingCentres is null,0,completedCountingCentres),'/',totalCountingCentres,' - ',IF(totalCountingCentres<>0 AND completedCountingCentres<>0,concat(round(( completedCountingCentres/totalCountingCentres * 100 ))),0)) AS value \nFROM (\nSELECT \n    $totalPostalCountingCentres AS totalCountingCentres,\n    SUM(IF(status = \"Submitted\" OR status = \"Entered\",1,0)) AS completedCountingCentres\nFROM (\n    SELECT \n    countingCentreId,\n    status\n    FROM dashboard_status_PRE_34\n    WHERE electionId = \"$electionId\"\n    AND voteType = \"Postal\"\n    GROUP BY countingCentreId\n  ) AS counting_centre_wise_status\n) AS T1",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "70%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#3274D9",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 20,
        "y": 12
      },
      "id": 65,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "80%",
      "prefix": "",
      "prefixFontSize": "50%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT \nconcat(completedElectoralDistricts,'/',totalElectoralDistricts,' - ',IF(totalElectoralDistricts<>0 AND completedElectoralDistricts<>0,concat(round(( completedElectoralDistricts/totalElectoralDistricts * 100 ))),0)) AS value \nFROM (\n        SELECT \n        $totalElectoralDistricts AS totalElectoralDistricts,\n        SUM(IF(totalCountingCentres=completedCountingCentres,1,0)) AS completedElectoralDistricts\n        FROM (\n          SELECT \n            COUNT(DISTINCT dashboard_status_PRE_34.countingCentreId) AS completedCountingCentres,\n            COUNT(DISTINCT area_map.countingCentreId) AS totalCountingCentres,\n            electoralDistrict.areaName as electoralDistrict  \n          FROM \n            area_map\n            join area as pollingDivision on pollingDivision.areaId = area_map.pollingDivisionId\n            join area as electoralDistrict on electoralDistrict.areaId = area_map.electoralDistrictId\n            left join  dashboard_status_PRE_34 on area_map.countingCentreId = dashboard_status_PRE_34.countingCentreId\n            AND dashboard_status_PRE_34.status <> \"Verified\" \n            AND dashboard_status_PRE_34.electionId = \"$electionId\"\n          GROUP BY\n            area_map.electoralDistrictId\n          ) AS T1\n          ) AS T2\n    \n    \n    \n    \n\n          \n          \n          \n          \n          ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "80%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "content": "# Verified\n\n\n\n\n",
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 0,
        "y": 14
      },
      "id": 72,
      "links": [],
      "mode": "markdown",
      "options": {},
      "repeatDirection": "h",
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT NOW() AS time,SUM(IF(T1.registeredPostalVotersCount IS NOT NULL, T1.registeredPostalVotersCount, 0) + IF(T1.registeredOrdinaryVotersCount IS NOT NULL, T1.registeredOrdinaryVotersCount, 0))  AS value FROM (\nSELECT \n      electoralDistrict.areaName as electoralDistrictName,\n      electoralDistrict.areaId as electoralDistrictId,\n      \n      pollingDivision.areaName as pollingDivisionName,\n      pollingDivision.areaId as pollingDivisionId,\n      \n      -- pollingDistrict.areaName as pollingDistrictName,\n      -- pollingDistrict.areaId as pollingDistrictId,\n      \n      pollingStation.areaName as pollingStationName,\n\t  pollingStation.areaId as pollingStationId,\n      sum(pollingStation._registeredVotersCount) as registeredOrdinaryVotersCount,\n      \n      countingCentre.areaName as countingCentreName,\n      countingCentre.areaId as countingCentreId,\n      sum(countingCentre._registeredVotersCount) as registeredPostalVotersCount,\n      \n      countingCentreElection.voteType\n      \n      -- districtCentre.areaName as districtCentreName,\n      -- districtCentre.areaId as districtCentreId\n      \n    \n    FROM \n      area countingCentre \n      \n      left join area_area as pollingStationMapping on pollingStationMapping.parentAreaId = countingCentre.areaId\n      left join area as pollingStation on pollingStation.areaId = pollingStationMapping.childAreaId and pollingStation.areaType = \"PollingStation\"\n      \n      left join area_area as pollingDistrictMapping on pollingDistrictMapping.childAreaId = pollingStation.areaId\n      left join area as pollingDistrict on pollingDistrict.areaId = pollingDistrictMapping.parentAreaId and pollingDistrict.areaType = \"PollingDistrict\"\n      \n      left join area_area as pollingDivisionMapping on pollingDivisionMapping.childAreaId = pollingDistrict.areaId\n      left join area as pollingDivision on pollingDivision.areaId = pollingDivisionMapping.parentAreaId and pollingDivision.areaType = \"PollingDivision\"\n      \n      inner join area_area as electoralDistrictMapping on  (electoralDistrictMapping.childAreaId = pollingDivision.areaId or electoralDistrictMapping.childAreaId = countingCentre.areaId )\n      inner join area as electoralDistrict on electoralDistrict.areaId = electoralDistrictMapping.parentAreaId and electoralDistrict.areaType = \"ElectoralDistrict\"\n      \n      inner join area_area as districtCentreMapping on districtCentreMapping.childAreaId = countingCentre.areaId\n      inner join area as districtCentre on districtCentre.areaId = districtCentreMapping.parentAreaId and districtCentre.areaType = \"DistrictCentre\"\n      \n      inner join election as countingCentreElection on countingCentreElection.electionId = countingCentre.electionId\n    WHERE \n      countingCentre.areaType = \"CountingCentre\"\n      \n    GROUP BY\n      electoralDistrict.areaId,\n      pollingDivision.areaId,\n      countingCentre.areaId,\n      pollingStation.areaId\n      ) AS T1\n     WHERE T1.electoralDistrictName = \"$district\"\n     AND T1.pollingDivisionName IN ($Polling_Division)\n     OR T1.pollingDivisionName IS NULL\n\n    \n    \n    ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "text"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "rgba(237, 129, 40, 0.89)",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 4,
        "y": 14
      },
      "id": 64,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "70%",
      "prefix": "",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT \n    concat(completedPollingStations,'/',totalPollingStations,' - ',IF(totalPollingStations<>0 AND completedPollingStations<>0,concat(round(( completedPollingStations/totalPollingStations * 100 ))),0)) AS value FROM (\n    SELECT $totalPollingStations AS totalPollingStations,COUNT(pollingstationid) AS completedPollingStations\nFROM   (SELECT countingcentreid \n        FROM   `dashboard_status_PRE_34` \n        WHERE  status = \"verified\"\n        AND electionId = \"$electionId\"\n        GROUP  BY countingcentreid) AS countingCentres \n       LEFT JOIN area_map \n              ON countingCentres.countingcentreid = area_map.countingcentreid \n    ) AS T1\n\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "70%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#56A64B",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 8,
        "y": 14
      },
      "id": 62,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "70%",
      "prefix": "",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT \nconcat(if(completedCountingCentres is null,0,completedCountingCentres),'/',totalCountingCentres,' - ',IF(totalCountingCentres<>0 AND completedCountingCentres<>0,concat(round(( completedCountingCentres/totalCountingCentres * 100 ))),0)) AS value \nFROM (\nSELECT \n    $OrdinaryCountingCentres AS totalCountingCentres,\n    SUM(IF(status = \"Verified\",1,0)) AS completedCountingCentres\nFROM (\n    SELECT \n    countingCentreId,\n    status\n    FROM dashboard_status_PRE_34\n    WHERE electionId = \"$electionId\"\n    AND voteType = \"Ordinary\"\n    GROUP BY countingCentreId\n  ) AS counting_centre_wise_status\n) AS T1",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "70%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#A352CC",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 12,
        "y": 14
      },
      "id": 63,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "70%",
      "prefix": "",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT\n      concat(if(completedPollingDivisions is null,0,completedPollingDivisions),'/',$totalPollingDivisions,' - ',IF($totalPollingDivisions<>0 AND completedPollingDivisions<>0,concat(round(( completedPollingDivisions/$totalPollingDivisions * 100 ))),0)) AS value \nFROM\n  (\n    SELECT\n      SUM(IF(notCompletedCountingCentres = 0, 1, 0)) as completedPollingDivisions\n    FROM\n      (\n        SELECT \n          pollingDivision.*,\n          SUM(IF(status = \"Verified\",0,1)) as notCompletedCountingCentres\n        FROM \n          dashboard_status_PRE_34\n          join area_map on area_map.countingCentreId = dashboard_status_PRE_34.countingCentreId\n          join area as pollingDivision on pollingDivision.areaId = area_map.pollingDivisionId\n        WHERE \n          dashboard_status_PRE_34.electionId = \"$electionId\"\n          AND dashboard_status_PRE_34.voteType = \"Ordinary\"\n        GROUP BY\n          area_map.pollingDivisionId\n      ) as pollingDivision201Status\n    ) as pollingDivision201Summary",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "70%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#F2CC0C",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 16,
        "y": 14
      },
      "id": 78,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "70%",
      "prefix": "",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT \nconcat(if(completedCountingCentres is null,0,completedCountingCentres),'/',totalCountingCentres,' - ',IF(totalCountingCentres<>0 AND completedCountingCentres<>0,concat(round(( completedCountingCentres/totalCountingCentres * 100 ))),0)) AS value \nFROM (\nSELECT \n    $totalPostalCountingCentres AS totalCountingCentres,\n    SUM(IF(status = \"Verified\",1,0)) AS completedCountingCentres\nFROM (\n    SELECT \n    countingCentreId,\n    status\n    FROM dashboard_status_PRE_34\n    WHERE electionId = \"$electionId\"\n    AND voteType = \"Postal\"\n    GROUP BY countingCentreId\n  ) AS counting_centre_wise_status\n) AS T1",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "70%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    },
    {
      "cacheTimeout": null,
      "colorBackground": false,
      "colorPostfix": true,
      "colorValue": true,
      "colors": [
        "#299c46",
        "#3274D9",
        "#d44a3a"
      ],
      "format": "none",
      "gauge": {
        "maxValue": 100,
        "minValue": 0,
        "show": false,
        "thresholdLabels": false,
        "thresholdMarkers": true
      },
      "gridPos": {
        "h": 2,
        "w": 4,
        "x": 20,
        "y": 14
      },
      "id": 76,
      "interval": null,
      "links": [],
      "mappingType": 1,
      "mappingTypes": [
        {
          "name": "value to text",
          "value": 1
        },
        {
          "name": "range to text",
          "value": 2
        }
      ],
      "maxDataPoints": 100,
      "nullPointMode": "connected",
      "nullText": null,
      "options": {},
      "postfix": "%",
      "postfixFontSize": "70%",
      "prefix": "",
      "prefixFontSize": "80%",
      "rangeMaps": [
        {
          "from": "null",
          "text": "N/A",
          "to": "null"
        }
      ],
      "sparkline": {
        "fillColor": "rgba(31, 118, 189, 0.18)",
        "full": false,
        "lineColor": "rgb(31, 120, 193)",
        "show": false
      },
      "tableColumn": "value",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT \nconcat(completedElectoralDistricts,'/',totalElectoralDistricts,' - ',IF(totalElectoralDistricts<>0 AND completedElectoralDistricts<>0,concat(round(( completedElectoralDistricts/totalElectoralDistricts * 100 ))),0)) AS value \nFROM (\n        SELECT \n        $totalElectoralDistricts AS totalElectoralDistricts,\n        SUM(IF(totalCountingCentres=completedCountingCentres,1,0)) AS completedElectoralDistricts\n        FROM (\n          SELECT \n            COUNT(DISTINCT dashboard_status_PRE_34.countingCentreId) AS completedCountingCentres,\n            COUNT(DISTINCT area_map.countingCentreId) AS totalCountingCentres,\n            electoralDistrict.areaName as electoralDistrict  \n          FROM \n            area_map\n            join area as pollingDivision on pollingDivision.areaId = area_map.pollingDivisionId\n            join area as electoralDistrict on electoralDistrict.areaId = area_map.electoralDistrictId\n            left join  dashboard_status_PRE_34 on dashboard_status_PRE_34.countingCentreId = area_map.countingCentreId\n              and dashboard_status_PRE_34.status = \"Verified\"\n              and dashboard_status_PRE_34.voteType = \"Ordinary\"\n              and dashboard_status_PRE_34.electionId = \"$electionId\"\n          GROUP BY\n            area_map.electoralDistrictId\n          ) AS T1\n          ) AS T2\n    \n    \n    \n    \n  \n          \n          \n          ",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "invoiceId"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "invoice",
          "timeColumn": "issuedAt",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "thresholds": "",
      "timeFrom": null,
      "timeShift": null,
      "title": "",
      "type": "singlestat",
      "valueFontSize": "70%",
      "valueMaps": [
        {
          "op": "=",
          "text": "N/A",
          "value": "null"
        }
      ],
      "valueName": "avg"
    }
  ],
  "refresh": "5s",
  "schemaVersion": 19,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "allValue": null,
        "current": {
          "tags": [],
          "text": "Presidential Election 2019 - System Test  [ LSF 1 ]",
          "value": "Presidential Election 2019 - System Test  [ LSF 1 ]"
        },
        "datasource": "MySQL",
        "definition": "SELECT electionName FROM election WHERE election.parentElectionId IS NULL",
        "hide": 0,
        "includeAll": false,
        "label": "Election",
        "multi": false,
        "name": "elections",
        "options": [],
        "query": "SELECT electionName FROM election WHERE election.parentElectionId IS NULL",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "12845",
          "value": "12845"
        },
        "datasource": "MySQL",
        "definition": "select count(DISTINCT pollingStationId) from area_map WHERE electionId=$electionId",
        "hide": 2,
        "includeAll": false,
        "label": "totalPollingStations",
        "multi": false,
        "name": "totalPollingStations",
        "options": [],
        "query": "select count(DISTINCT pollingStationId) from area_map WHERE electionId=$electionId",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "15333066",
          "value": "15333066"
        },
        "datasource": "MySQL",
        "definition": "select sum(pollingStation._registeredVotersCount) - $totalRegisteredPostalVoters from area_map    join election as election on election.electionId = area_map.electionId   join area as pollingStation on pollingStation.areaId = area_map.pollingStationId where area_map.voteType = \"NonPostal\" and election.electionName = \"$elections\"",
        "hide": 2,
        "includeAll": false,
        "label": "totalRegisteredOrdinaryVoters",
        "multi": false,
        "name": "totalRegisteredOrdinaryVoters",
        "options": [],
        "query": "select sum(pollingStation._registeredVotersCount) - $totalRegisteredPostalVoters from area_map    join election as election on election.electionId = area_map.electionId   join area as pollingStation on pollingStation.areaId = area_map.pollingStationId where area_map.voteType = \"NonPostal\" and election.electionName = \"$elections\"",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "800813",
          "value": "800813"
        },
        "datasource": "MySQL",
        "definition": "SELECT if(sum(voteCount) is null,0,sum(voteCount) ) AS totalVoteCount FROM dashboard_status_PRE_41  WHERE voteType = \"Ordinary\"  AND electionId = \"$electionId\" AND status=\"Verified\" AND candidateId IS NOT NULL",
        "hide": 2,
        "includeAll": false,
        "label": "totalPolledValidOrdinaryVotes",
        "multi": false,
        "name": "totalPolledValidOrdinaryVotes",
        "options": [],
        "query": "SELECT if(sum(voteCount) is null,0,sum(voteCount) ) AS totalVoteCount FROM dashboard_status_PRE_41  WHERE voteType = \"Ordinary\"  AND electionId = \"$electionId\" AND status=\"Verified\" AND candidateId IS NOT NULL",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "659030",
          "value": "659030"
        },
        "datasource": "MySQL",
        "definition": " select sum(countingCentre._registeredVotersCount) from area_map    join election as election on election.electionId = area_map.electionId   join area as countingCentre on countingCentre.areaId = area_map.countingCentreId where area_map.voteType = \"Postal\" and election.electionName = \"$elections\"",
        "hide": 2,
        "includeAll": false,
        "label": "totalRegisteredPostalVoters",
        "multi": false,
        "name": "totalRegisteredPostalVoters",
        "options": [],
        "query": " select sum(countingCentre._registeredVotersCount) from area_map    join election as election on election.electionId = area_map.electionId   join area as countingCentre on countingCentre.areaId = area_map.countingCentreId where area_map.voteType = \"Postal\" and election.electionName = \"$elections\"",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "135466",
          "value": "135466"
        },
        "datasource": "MySQL",
        "definition": "SELECT if(sum(voteCount) is null,0,sum(voteCount) ) AS totalVoteCount FROM dashboard_status_PRE_41  WHERE voteType = \"Ordinary\" AND status=\"Verified\" AND electionId = \"$electionId\"  AND candidateId IS NULL",
        "hide": 2,
        "includeAll": false,
        "label": "totalPolledRejectedOrdinaryVotes",
        "multi": false,
        "name": "totalPolledRejectedOrdinaryVotes",
        "options": [],
        "query": "SELECT if(sum(voteCount) is null,0,sum(voteCount) ) AS totalVoteCount FROM dashboard_status_PRE_41  WHERE voteType = \"Ordinary\" AND status=\"Verified\" AND electionId = \"$electionId\"  AND candidateId IS NULL",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "4601",
          "value": "4601"
        },
        "datasource": "MySQL",
        "definition": "SELECT if(sum(voteCount) is null,0,sum(voteCount) ) AS totalVoteCount FROM dashboard_status_PRE_41  WHERE voteType = \"Postal\" AND status=\"Verified\"  AND electionId = \"$electionId\"  AND candidateId IS NOT NULL",
        "hide": 2,
        "includeAll": false,
        "label": "totalPolledValidPostalVotes",
        "multi": false,
        "name": "totalPolledValidPostalVotes",
        "options": [],
        "query": "SELECT if(sum(voteCount) is null,0,sum(voteCount) ) AS totalVoteCount FROM dashboard_status_PRE_41  WHERE voteType = \"Postal\" AND status=\"Verified\"  AND electionId = \"$electionId\"  AND candidateId IS NOT NULL",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "1259",
          "value": "1259"
        },
        "datasource": "MySQL",
        "definition": "SELECT if(sum(voteCount) is null,0,sum(voteCount)) AS totalVoteCount FROM dashboard_status_PRE_41  WHERE voteType = \"Postal\"  AND electionId = \"$electionId\" AND status=\"Verified\"  AND candidateId IS NULL",
        "hide": 2,
        "includeAll": false,
        "label": "totalPolledRejectedPostalVotes",
        "multi": false,
        "name": "totalPolledRejectedPostalVotes",
        "options": [],
        "query": "SELECT if(sum(voteCount) is null,0,sum(voteCount)) AS totalVoteCount FROM dashboard_status_PRE_41  WHERE voteType = \"Postal\"  AND electionId = \"$electionId\" AND status=\"Verified\"  AND candidateId IS NULL",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "19",
          "value": "19"
        },
        "datasource": "MySQL",
        "definition": "select electionId from election where electionName = \"$elections\"",
        "hide": 2,
        "includeAll": false,
        "label": "electionId",
        "multi": false,
        "name": "electionId",
        "options": [],
        "query": "select electionId from election where electionName = \"$elections\"",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "371",
          "value": "371"
        },
        "datasource": "MySQL",
        "definition": "select count(DISTINCT countingCentreId) from area_map WHERE electionId=$electionId and voteType=\"Postal\"",
        "hide": 2,
        "includeAll": false,
        "label": "totalPostalCountingCentres",
        "multi": false,
        "name": "totalPostalCountingCentres",
        "options": [],
        "query": "select count(DISTINCT countingCentreId) from area_map WHERE electionId=$electionId and voteType=\"Postal\"",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "1179",
          "value": "1179"
        },
        "datasource": "MySQL",
        "definition": "select count(DISTINCT countingCentreId) from area_map WHERE electionId=$electionId and voteType=\"NonPostal\"",
        "hide": 2,
        "includeAll": false,
        "label": "OrdinaryCountingCentres",
        "multi": false,
        "name": "OrdinaryCountingCentres",
        "options": [],
        "query": "select count(DISTINCT countingCentreId) from area_map WHERE electionId=$electionId and voteType=\"NonPostal\"",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "160",
          "value": "160"
        },
        "datasource": "MySQL",
        "definition": "select count(DISTINCT pollingDivisionId) from area_map WHERE electionId=$electionId",
        "hide": 2,
        "includeAll": false,
        "label": "totalPollingDivisions",
        "multi": false,
        "name": "totalPollingDivisions",
        "options": [],
        "query": "select count(DISTINCT pollingDivisionId) from area_map WHERE electionId=$electionId",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "22",
          "value": "22"
        },
        "datasource": "MySQL",
        "definition": "select count(DISTINCT electoralDistrictId) from area_map WHERE electionId=$electionId",
        "hide": 2,
        "includeAll": false,
        "label": "totalElectoralDistricts",
        "multi": false,
        "name": "totalElectoralDistricts",
        "options": [],
        "query": "select count(DISTINCT electoralDistrictId) from area_map WHERE electionId=$electionId",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "744790",
          "value": "744790"
        },
        "datasource": "MySQL",
        "definition": "SELECT if(SUM(totalVoteCount) is null,0,SUM(totalVoteCount))FROM ( SELECT candidateName as \"Candidate Name\",       totalVoteCount as totalVoteCount,        sum(secondPreferenceCount) AS \"2nd Preference\",       sum(thirdPreferenceCount) AS \"3rd Preference\",       sum(totalVoteCount + secondPreferenceCount + thirdPreferenceCount) AS Total,       concat(round(((totalVoteCount + if(secondPreferenceCount is null,0,secondPreferenceCount) + if(thirdPreferenceCount is null,0,thirdPreferenceCount))/($totalPolledValidOrdinaryVotes + $totalPolledRejectedOrdinaryVotes)*100),2),\"%\") AS '%'        from ( SELECT dashboard_status_PRE_41.candidateId,candidate.candidateName AS candidateName,SUM(dashboard_status_PRE_41.voteCount) AS totalVoteCount  FROM dashboard_status_PRE_41 join candidate on dashboard_status_PRE_41.candidateId = candidate.candidateId WHERE electionId = \"$electionId\" AND dashboard_status_PRE_41.candidateId IS NOT NULL GROUP BY dashboard_status_PRE_41.electionId,dashboard_status_PRE_41.candidateId ) as t1 LEFT JOIN dashboard_status_PRE_34 ON t1.candidateId = dashboard_status_PRE_34.candidateId GROUP BY t1.candidateId ORDER BY totalVoteCount DESC LIMIT 5) AS T1",
        "hide": 2,
        "includeAll": false,
        "label": "top5CandidateVoteCount1stPref",
        "multi": false,
        "name": "top5CandidateVoteCount1stPref",
        "options": [],
        "query": "SELECT if(SUM(totalVoteCount) is null,0,SUM(totalVoteCount))FROM ( SELECT candidateName as \"Candidate Name\",       totalVoteCount as totalVoteCount,        sum(secondPreferenceCount) AS \"2nd Preference\",       sum(thirdPreferenceCount) AS \"3rd Preference\",       sum(totalVoteCount + secondPreferenceCount + thirdPreferenceCount) AS Total,       concat(round(((totalVoteCount + if(secondPreferenceCount is null,0,secondPreferenceCount) + if(thirdPreferenceCount is null,0,thirdPreferenceCount))/($totalPolledValidOrdinaryVotes + $totalPolledRejectedOrdinaryVotes)*100),2),\"%\") AS '%'        from ( SELECT dashboard_status_PRE_41.candidateId,candidate.candidateName AS candidateName,SUM(dashboard_status_PRE_41.voteCount) AS totalVoteCount  FROM dashboard_status_PRE_41 join candidate on dashboard_status_PRE_41.candidateId = candidate.candidateId WHERE electionId = \"$electionId\" AND dashboard_status_PRE_41.candidateId IS NOT NULL GROUP BY dashboard_status_PRE_41.electionId,dashboard_status_PRE_41.candidateId ) as t1 LEFT JOIN dashboard_status_PRE_34 ON t1.candidateId = dashboard_status_PRE_34.candidateId GROUP BY t1.candidateId ORDER BY totalVoteCount DESC LIMIT 5) AS T1",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "0",
          "value": "0"
        },
        "datasource": "MySQL",
        "definition": "SELECT IF(SUM(secondPreferenceCount) IS NULL,0,SUM(secondPreferenceCount)) FROM ( SELECT candidateName as \"Candidate Name\",       totalVoteCount as \"1st Preference\",        sum(secondPreferenceCount) AS secondPreferenceCount,       sum(thirdPreferenceCount) AS thirdPreferenceCount,       sum(totalVoteCount + secondPreferenceCount + thirdPreferenceCount) AS Total,       concat(round(((totalVoteCount + if(secondPreferenceCount is null,0,secondPreferenceCount) + if(thirdPreferenceCount is null,0,thirdPreferenceCount))/($totalPolledValidOrdinaryVotes + $totalPolledRejectedOrdinaryVotes)*100),2),\"%\") AS '%'        from ( SELECT dashboard_status_PRE_41.candidateId,candidate.candidateName AS candidateName,SUM(dashboard_status_PRE_41.voteCount) AS totalVoteCount  FROM dashboard_status_PRE_41 join candidate on dashboard_status_PRE_41.candidateId = candidate.candidateId WHERE electionId = \"$electionId\" AND dashboard_status_PRE_41.candidateId IS NOT NULL GROUP BY dashboard_status_PRE_41.electionId,dashboard_status_PRE_41.candidateId ) as t1 LEFT JOIN dashboard_status_PRE_34 ON t1.candidateId = dashboard_status_PRE_34.candidateId GROUP BY t1.candidateId ORDER BY totalVoteCount DESC LIMIT 5) AS T1",
        "hide": 2,
        "includeAll": false,
        "label": "top5CandidateVoteCount2ndPref",
        "multi": false,
        "name": "top5CandidateVoteCount2ndPref",
        "options": [],
        "query": "SELECT IF(SUM(secondPreferenceCount) IS NULL,0,SUM(secondPreferenceCount)) FROM ( SELECT candidateName as \"Candidate Name\",       totalVoteCount as \"1st Preference\",        sum(secondPreferenceCount) AS secondPreferenceCount,       sum(thirdPreferenceCount) AS thirdPreferenceCount,       sum(totalVoteCount + secondPreferenceCount + thirdPreferenceCount) AS Total,       concat(round(((totalVoteCount + if(secondPreferenceCount is null,0,secondPreferenceCount) + if(thirdPreferenceCount is null,0,thirdPreferenceCount))/($totalPolledValidOrdinaryVotes + $totalPolledRejectedOrdinaryVotes)*100),2),\"%\") AS '%'        from ( SELECT dashboard_status_PRE_41.candidateId,candidate.candidateName AS candidateName,SUM(dashboard_status_PRE_41.voteCount) AS totalVoteCount  FROM dashboard_status_PRE_41 join candidate on dashboard_status_PRE_41.candidateId = candidate.candidateId WHERE electionId = \"$electionId\" AND dashboard_status_PRE_41.candidateId IS NOT NULL GROUP BY dashboard_status_PRE_41.electionId,dashboard_status_PRE_41.candidateId ) as t1 LEFT JOIN dashboard_status_PRE_34 ON t1.candidateId = dashboard_status_PRE_34.candidateId GROUP BY t1.candidateId ORDER BY totalVoteCount DESC LIMIT 5) AS T1",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "0",
          "value": "0"
        },
        "datasource": "MySQL",
        "definition": "SELECT IF(SUM(thirdPreferenceCount) IS NULL,0,SUM(thirdPreferenceCount)) FROM ( SELECT candidateName as \"Candidate Name\",       totalVoteCount as \"1st Preference\",        sum(secondPreferenceCount) AS secondPreferenceCount,       sum(thirdPreferenceCount) AS thirdPreferenceCount,       sum(totalVoteCount + secondPreferenceCount + thirdPreferenceCount) AS Total,       concat(round(((totalVoteCount + if(secondPreferenceCount is null,0,secondPreferenceCount) + if(thirdPreferenceCount is null,0,thirdPreferenceCount))/($totalPolledValidOrdinaryVotes + $totalPolledRejectedOrdinaryVotes)*100),2),\"%\") AS '%'        from ( SELECT dashboard_status_PRE_41.candidateId,candidate.candidateName AS candidateName,SUM(dashboard_status_PRE_41.voteCount) AS totalVoteCount  FROM dashboard_status_PRE_41 join candidate on dashboard_status_PRE_41.candidateId = candidate.candidateId WHERE electionId = \"$electionId\" AND dashboard_status_PRE_41.candidateId IS NOT NULL GROUP BY dashboard_status_PRE_41.electionId,dashboard_status_PRE_41.candidateId ) as t1 LEFT JOIN dashboard_status_PRE_34 ON t1.candidateId = dashboard_status_PRE_34.candidateId GROUP BY t1.candidateId ORDER BY totalVoteCount DESC LIMIT 5) AS T1",
        "hide": 2,
        "includeAll": false,
        "label": "top5CandidateVoteCount3rdPref",
        "multi": false,
        "name": "top5CandidateVoteCount3rdPref",
        "options": [],
        "query": "SELECT IF(SUM(thirdPreferenceCount) IS NULL,0,SUM(thirdPreferenceCount)) FROM ( SELECT candidateName as \"Candidate Name\",       totalVoteCount as \"1st Preference\",        sum(secondPreferenceCount) AS secondPreferenceCount,       sum(thirdPreferenceCount) AS thirdPreferenceCount,       sum(totalVoteCount + secondPreferenceCount + thirdPreferenceCount) AS Total,       concat(round(((totalVoteCount + if(secondPreferenceCount is null,0,secondPreferenceCount) + if(thirdPreferenceCount is null,0,thirdPreferenceCount))/($totalPolledValidOrdinaryVotes + $totalPolledRejectedOrdinaryVotes)*100),2),\"%\") AS '%'        from ( SELECT dashboard_status_PRE_41.candidateId,candidate.candidateName AS candidateName,SUM(dashboard_status_PRE_41.voteCount) AS totalVoteCount  FROM dashboard_status_PRE_41 join candidate on dashboard_status_PRE_41.candidateId = candidate.candidateId WHERE electionId = \"$electionId\" AND dashboard_status_PRE_41.candidateId IS NOT NULL GROUP BY dashboard_status_PRE_41.electionId,dashboard_status_PRE_41.candidateId ) as t1 LEFT JOIN dashboard_status_PRE_34 ON t1.candidateId = dashboard_status_PRE_34.candidateId GROUP BY t1.candidateId ORDER BY totalVoteCount DESC LIMIT 5) AS T1",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "text": "744790",
          "value": "744790"
        },
        "datasource": "MySQL",
        "definition": "SELECT if(sum(Total) is null,0,sum(Total))FROM ( SELECT candidateName as \"Candidate Name\",       totalVoteCount as \"1st Preference\",        sum(secondPreferenceCount) AS \"2nd Preference\",       sum(thirdPreferenceCount) AS \"3rd Preference\",       sum(if(totalVoteCount is null,0,totalVoteCount) + if(secondPreferenceCount is null,0,secondPreferenceCount) + if(thirdPreferenceCount is null,0,thirdPreferenceCount)) AS Total,       concat(round(((totalVoteCount + if(secondPreferenceCount is null,0,secondPreferenceCount) + if(thirdPreferenceCount is null,0,thirdPreferenceCount))/($totalPolledValidOrdinaryVotes + $totalPolledRejectedOrdinaryVotes)*100),2),\"%\") AS '%'        from ( SELECT dashboard_status_PRE_41.candidateId,candidate.candidateName AS candidateName,SUM(dashboard_status_PRE_41.voteCount) AS totalVoteCount  FROM dashboard_status_PRE_41 join candidate on dashboard_status_PRE_41.candidateId = candidate.candidateId WHERE electionId = \"$electionId\" AND dashboard_status_PRE_41.candidateId IS NOT NULL GROUP BY dashboard_status_PRE_41.electionId,dashboard_status_PRE_41.candidateId ) as t1 LEFT JOIN dashboard_status_PRE_34 ON t1.candidateId = dashboard_status_PRE_34.candidateId GROUP BY t1.candidateId ORDER BY totalVoteCount DESC LIMIT 5) as t1",
        "hide": 2,
        "includeAll": false,
        "label": "top5CandidateVoteCountTotal",
        "multi": false,
        "name": "top5CandidateVoteCountTotal",
        "options": [],
        "query": "SELECT if(sum(Total) is null,0,sum(Total))FROM ( SELECT candidateName as \"Candidate Name\",       totalVoteCount as \"1st Preference\",        sum(secondPreferenceCount) AS \"2nd Preference\",       sum(thirdPreferenceCount) AS \"3rd Preference\",       sum(if(totalVoteCount is null,0,totalVoteCount) + if(secondPreferenceCount is null,0,secondPreferenceCount) + if(thirdPreferenceCount is null,0,thirdPreferenceCount)) AS Total,       concat(round(((totalVoteCount + if(secondPreferenceCount is null,0,secondPreferenceCount) + if(thirdPreferenceCount is null,0,thirdPreferenceCount))/($totalPolledValidOrdinaryVotes + $totalPolledRejectedOrdinaryVotes)*100),2),\"%\") AS '%'        from ( SELECT dashboard_status_PRE_41.candidateId,candidate.candidateName AS candidateName,SUM(dashboard_status_PRE_41.voteCount) AS totalVoteCount  FROM dashboard_status_PRE_41 join candidate on dashboard_status_PRE_41.candidateId = candidate.candidateId WHERE electionId = \"$electionId\" AND dashboard_status_PRE_41.candidateId IS NOT NULL GROUP BY dashboard_status_PRE_41.electionId,dashboard_status_PRE_41.candidateId ) as t1 LEFT JOIN dashboard_status_PRE_34 ON t1.candidateId = dashboard_status_PRE_34.candidateId GROUP BY t1.candidateId ORDER BY totalVoteCount DESC LIMIT 5) as t1",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      }
    ]
  },
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "5s",
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ],
    "time_options": [
      "5m",
      "15m",
      "1h",
      "6h",
      "12h",
      "24h",
      "2d",
      "7d",
      "30d"
    ]
  },
  "timezone": "",
  "title": "National Results Status Unofficial (Preferential)",
  "uid": "v6ETDp1Zk",
  "version": 5
}