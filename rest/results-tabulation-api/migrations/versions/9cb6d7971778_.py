"""empty message

Revision ID: 9cb6d7971778
Revises: a4b00dd4b387
Create Date: 2020-01-23 17:46:41.554467

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy import literal
from sqlalchemy.dialects import mysql
from sqlalchemy.orm import Session, relationship
from sqlalchemy.ext.declarative import declarative_base

# revision identifiers, used by Alembic.
revision = '9cb6d7971778'
down_revision = 'a4b00dd4b387'
branch_labels = None
depends_on = None

Base = declarative_base()
bind = op.get_bind()
session = Session(bind=bind)
db = sa


def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'tallySheetVersionRow',
        sa.Column('tallySheetVersionRowId', sa.Integer(), nullable=False),
        sa.Column('templateRowId', sa.Integer(), nullable=False),
        sa.Column('tallySheetVersionId', sa.Integer(), nullable=False),
        sa.Column('electionId', sa.Integer(), nullable=False),
        sa.Column('areaId', sa.Integer(), nullable=True),
        sa.Column('candidateId', sa.Integer(), nullable=True),
        sa.Column('partyId', sa.Integer(), nullable=True),
        sa.Column('numValue', sa.Integer(), nullable=True),
        sa.Column('strValue', sa.String(length=100), nullable=True),
        sa.ForeignKeyConstraint(['areaId'], ['area.areaId'], ),
        sa.ForeignKeyConstraint(['candidateId'], ['candidate.candidateId'], ),
        sa.ForeignKeyConstraint(['electionId'], ['election.electionId'], ),
        sa.ForeignKeyConstraint(['partyId'], ['party.partyId'], ),
        sa.ForeignKeyConstraint(['tallySheetVersionId'], ['tallySheetVersion.tallySheetVersionId'], ),
        sa.PrimaryKeyConstraint('tallySheetVersionRowId')
    )
    op.create_table(
        'tallySheet_map',
        sa.Column('tallySheetMapId', sa.Integer(), nullable=False),
        sa.Column('pre_41_tallySheetId', sa.Integer(), nullable=True),
        sa.Column('pre_34_co_tallySheetId', sa.Integer(), nullable=True),
        sa.Column('ce_201_tallySheetId', sa.Integer(), nullable=True),
        sa.Column('ce_201_pv_tallySheetId', sa.Integer(), nullable=True),
        sa.Column('pre_30_pd_tallySheetId', sa.Integer(), nullable=True),
        sa.Column('pre_34_i_ro_tallySheetId', sa.Integer(), nullable=True),
        sa.Column('pre_34_pd_tallySheetId', sa.Integer(), nullable=True),
        sa.Column('pre_30_ed_tallySheetId', sa.Integer(), nullable=True),
        sa.Column('pre_34_ii_ro_tallySheetId', sa.Integer(), nullable=True),
        sa.Column('pre_34_tallySheetId', sa.Integer(), nullable=True),
        sa.Column('pre_34_ed_tallySheetId', sa.Integer(), nullable=True),
        sa.Column('pre_all_island_ed_tallySheetId', sa.Integer(), nullable=True),
        sa.Column('pre_all_island_tallySheetId', sa.Integer(), nullable=True),
        sa.Column('pre_34_ai_tallySheetId', sa.Integer(), nullable=True),
        sa.Column('pe_27_tallySheetId', sa.Integer(), nullable=True),
        sa.Column('pe_4_tallySheetId', sa.Integer(), nullable=True),
        sa.Column('pe_ce_ro_v1_tallySheetId', sa.Integer(), nullable=True),
        sa.Column('pe_r1_tallySheetId', sa.Integer(), nullable=True),
        sa.Column('pe_ce_ro_pr_1_tallySheetId', sa.Integer(), nullable=True),
        sa.Column('pe_ce_ro_v2_tallySheetId', sa.Integer(), nullable=True),
        sa.Column('pe_r2_tallySheetId', sa.Integer(), nullable=True),
        sa.Column('pe_ce_ro_pr_2_tallySheetId', sa.Integer(), nullable=True),
        sa.Column('pe_ce_ro_pr_3_tallySheetId', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['ce_201_pv_tallySheetId'], ['tallySheet.tallySheetId'], ),
        sa.ForeignKeyConstraint(['ce_201_tallySheetId'], ['tallySheet.tallySheetId'], ),
        sa.ForeignKeyConstraint(['pe_27_tallySheetId'], ['tallySheet.tallySheetId'], ),
        sa.ForeignKeyConstraint(['pe_4_tallySheetId'], ['tallySheet.tallySheetId'], ),
        sa.ForeignKeyConstraint(['pe_ce_ro_pr_1_tallySheetId'], ['tallySheet.tallySheetId'], ),
        sa.ForeignKeyConstraint(['pe_ce_ro_pr_2_tallySheetId'], ['tallySheet.tallySheetId'], ),
        sa.ForeignKeyConstraint(['pe_ce_ro_pr_3_tallySheetId'], ['tallySheet.tallySheetId'], ),
        sa.ForeignKeyConstraint(['pe_ce_ro_v1_tallySheetId'], ['tallySheet.tallySheetId'], ),
        sa.ForeignKeyConstraint(['pe_ce_ro_v2_tallySheetId'], ['tallySheet.tallySheetId'], ),
        sa.ForeignKeyConstraint(['pe_r1_tallySheetId'], ['tallySheet.tallySheetId'], ),
        sa.ForeignKeyConstraint(['pe_r2_tallySheetId'], ['tallySheet.tallySheetId'], ),
        sa.ForeignKeyConstraint(['pre_30_ed_tallySheetId'], ['tallySheet.tallySheetId'], ),
        sa.ForeignKeyConstraint(['pre_30_pd_tallySheetId'], ['tallySheet.tallySheetId'], ),
        sa.ForeignKeyConstraint(['pre_34_ai_tallySheetId'], ['tallySheet.tallySheetId'], ),
        sa.ForeignKeyConstraint(['pre_34_co_tallySheetId'], ['tallySheet.tallySheetId'], ),
        sa.ForeignKeyConstraint(['pre_34_ed_tallySheetId'], ['tallySheet.tallySheetId'], ),
        sa.ForeignKeyConstraint(['pre_34_i_ro_tallySheetId'], ['tallySheet.tallySheetId'], ),
        sa.ForeignKeyConstraint(['pre_34_ii_ro_tallySheetId'], ['tallySheet.tallySheetId'], ),
        sa.ForeignKeyConstraint(['pre_34_pd_tallySheetId'], ['tallySheet.tallySheetId'], ),
        sa.ForeignKeyConstraint(['pre_34_tallySheetId'], ['tallySheet.tallySheetId'], ),
        sa.ForeignKeyConstraint(['pre_41_tallySheetId'], ['tallySheet.tallySheetId'], ),
        sa.ForeignKeyConstraint(['pre_all_island_ed_tallySheetId'], ['tallySheet.tallySheetId'], ),
        sa.ForeignKeyConstraint(['pre_all_island_tallySheetId'], ['tallySheet.tallySheetId'], ),
        sa.PrimaryKeyConstraint('tallySheetMapId')
    )
    op.create_table(
        'tallySheet_tallySheet',
        sa.Column('parentTallySheetId', sa.Integer(), nullable=False),
        sa.Column('childTallySheetId', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['childTallySheetId'], ['tallySheet.tallySheetId'], ),
        sa.ForeignKeyConstraint(['parentTallySheetId'], ['tallySheet.tallySheetId'], ),
        sa.PrimaryKeyConstraint('parentTallySheetId', 'childTallySheetId')
    )
    op.create_table(
        'template',
        sa.Column('templateId', sa.Integer(), nullable=False),
        sa.Column('templateName', sa.String(length=100), nullable=False),
        sa.PrimaryKeyConstraint('templateId')
    )
    op.create_table(
        'templateRow',
        sa.Column('templateRowId', sa.Integer(), nullable=False),
        sa.Column('templateId', sa.Integer(), nullable=True),
        sa.Column('templateRowType', sa.String(length=200), nullable=False),
        sa.Column('hasMany', sa.Boolean(), nullable=False),
        sa.Column('isDerived', sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(['templateId'], ['template.templateId'], ),
        sa.PrimaryKeyConstraint('templateRowId')
    )
    op.create_table(
        'templateRowColumn',
        sa.Column('templateRowColumnId', sa.Integer(), nullable=False),
        sa.Column('templateRowId', sa.Integer(), nullable=True),
        sa.Column('templateRowColumnName', sa.String(length=200), nullable=False),
        sa.Column('grouped', sa.Boolean(), nullable=False),
        sa.Column('func', sa.String(length=200), nullable=True),
        sa.ForeignKeyConstraint(['templateRowId'], ['templateRow.templateRowId'], ),
        sa.PrimaryKeyConstraint('templateRowColumnId')
    )
    op.create_table(
        'templateRow_derivativeTemplateRow',
        sa.Column('templateRowId', sa.Integer(), nullable=False),
        sa.Column('derivativeTemplateRowId', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['derivativeTemplateRowId'], ['templateRow.templateRowId'], ),
        sa.ForeignKeyConstraint(['templateRowId'], ['templateRow.templateRowId'], ),
        sa.PrimaryKeyConstraint('templateRowId', 'derivativeTemplateRowId')
    )

    op.alter_column(
        'area_map', 'voteType',
        existing_type=mysql.ENUM('Postal', 'NonPostal', 'PostalAndNonPostal',
                                 collation='utf8mb4_unicode_ci'),
        type_=sa.String(length=100),
        nullable=False)
    op.add_column('election', sa.Column('electionTemplateName', sa.String(length=100), nullable=True))
    op.alter_column(
        'election', 'isListed',
        existing_type=mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=100),
        type_=sa.Boolean(),
        existing_nullable=False)
    op.alter_column(
        'election', 'voteType',
        existing_type=mysql.ENUM('Postal', 'NonPostal', 'PostalAndNonPostal',
                                 collation='utf8mb4_unicode_ci'),
        type_=sa.String(length=100),
        existing_nullable=False)
    op.add_column('tallySheet', sa.Column('templateId', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'tallySheet', 'template', ['templateId'], ['templateId'])

    class _Election(Base):
        __tablename__ = 'election'
        electionId = sa.Column(sa.Integer, primary_key=True, autoincrement=True)
        electionTemplateName = db.Column(db.String(100))
        rootElectionId = sa.Column(sa.Integer,
                                   sa.ForeignKey("election.electionId", name="fk_election_root_election_id"),
                                   nullable=True)
        parentElectionId = sa.Column(sa.Integer, sa.ForeignKey("election.electionId"), nullable=True)

    class _ElectionCandidate(Base):
        __tablename__ = 'election_candidate'
        electionCandidateId = db.Column(db.Integer, primary_key=True, autoincrement=True)
        electionId = db.Column(db.Integer, db.ForeignKey("election.electionId"), nullable=False)
        partyId = db.Column(db.Integer, nullable=False)
        candidateId = db.Column(db.Integer, nullable=False)
        qualifiedForPreferences = db.Column(db.Boolean, default=False, nullable=False)

    class _AreaMap(Base):
        __tablename__ = 'area_map'
        areaMapId = db.Column(db.Integer, primary_key=True, autoincrement=True)
        electionId = db.Column(db.Integer, db.ForeignKey("election.electionId"), nullable=True)
        voteType = db.Column(db.String(100), nullable=False)
        pollingStationId = db.Column(db.Integer, nullable=True)
        countingCentreId = db.Column(db.Integer, nullable=True)
        districtCentreId = db.Column(db.Integer, nullable=True)
        electionCommissionId = db.Column(db.Integer, nullable=True)
        pollingDistrictId = db.Column(db.Integer, nullable=True)
        pollingDivisionId = db.Column(db.Integer, nullable=True)
        electoralDistrictId = db.Column(db.Integer, nullable=True)
        countryId = db.Column(db.Integer, nullable=True)

    class _Submission(Base):
        __tablename__ = 'submission'
        submissionId = db.Column(sa.Integer, primary_key=True)
        electionId = db.Column(db.Integer, db.ForeignKey("election.electionId"), nullable=False)
        areaId = db.Column(db.Integer, nullable=False)
        latestVersionId = db.Column(db.Integer, db.ForeignKey("submissionVersion.submissionVersionId"), nullable=True)
        latestStampId = db.Column(db.Integer, db.ForeignKey("stamp.stampId"), nullable=True)
        lockedVersionId = db.Column(db.Integer, db.ForeignKey("submissionVersion.submissionVersionId"), nullable=True)
        lockedStampId = db.Column(db.Integer, db.ForeignKey("stamp.stampId"), nullable=True)
        submittedVersionId = db.Column(db.Integer, db.ForeignKey("submissionVersion.submissionVersionId"),
                                       nullable=True)
        submittedStampId = db.Column(db.Integer, db.ForeignKey("stamp.stampId"), nullable=True)
        notifiedVersionId = db.Column(db.Integer, db.ForeignKey("submissionVersion.submissionVersionId"), nullable=True)
        notifiedStampId = db.Column(db.Integer, db.ForeignKey("stamp.stampId"), nullable=True)
        releasedVersionId = db.Column(db.Integer, db.ForeignKey("submissionVersion.submissionVersionId"), nullable=True)
        releasedStampId = db.Column(db.Integer, db.ForeignKey("stamp.stampId"), nullable=True)

    class _SubmissionVersion(Base):
        __tablename__ = 'submissionVersion'
        submissionVersionId = db.Column(sa.Integer, primary_key=True)
        submissionId = db.Column(db.Integer, db.ForeignKey("submission.submissionId"))

        submission = relationship("_Submission", foreign_keys=[submissionId])

    class _TallySheet(Base):
        __tablename__ = 'tallySheet'

        tallySheetId = db.Column(db.Integer, db.ForeignKey("submission.submissionId"), primary_key=True)
        templateId = db.Column(db.Integer, db.ForeignKey("template.templateId"), nullable=False)
        tallySheetCode = db.Column(db.String(100), nullable=True)

        submission = relationship("_Submission", foreign_keys=[tallySheetId])

    class _TallySheetVersion(Base):
        __tablename__ = 'tallySheetVersion'
        tallySheetVersionId = db.Column(db.Integer, db.ForeignKey("submissionVersion.submissionVersionId"),
                                        primary_key=True)
        isComplete = db.Column(db.Boolean, default=False, nullable=False)

    class _TallySheetVersionRow(Base):
        __tablename__ = 'tallySheetVersionRow'
        tallySheetVersionRowId = db.Column(db.Integer, primary_key=True)
        templateRowId = db.Column(db.Integer, nullable=False)
        tallySheetVersionId = db.Column(db.Integer, db.ForeignKey("tallySheetVersion.tallySheetVersionId"),
                                        nullable=False)
        electionId = db.Column(db.Integer, db.ForeignKey("election.electionId"), nullable=False)
        areaId = db.Column(db.Integer, nullable=True)
        candidateId = db.Column(db.Integer, nullable=True)
        partyId = db.Column(db.Integer, nullable=True)
        numValue = db.Column(db.Integer, nullable=True)
        strValue = db.Column(db.String(100), nullable=True)

    class _TallySheetVersionRow_RejectedVoteCount(Base):
        __tablename__ = 'tallySheetVersionRow_RejectedVoteCount'
        tallySheetVersionRowId = db.Column(db.Integer, primary_key=True)
        tallySheetVersionId = db.Column(db.Integer, db.ForeignKey("tallySheetVersion.tallySheetVersionId"),
                                        nullable=False)
        electionId = db.Column(db.Integer, db.ForeignKey("election.electionId"), nullable=False)
        areaId = db.Column(db.Integer, nullable=True)
        candidateId = db.Column(db.Integer, nullable=True)
        rejectedVoteCount = db.Column(db.Integer, nullable=False)

    class _Template(Base):
        __tablename__ = 'template'
        templateId = db.Column(db.Integer, primary_key=True, autoincrement=True)
        templateName = db.Column(db.String(100), nullable=False)

        def add_row(self, templateRowType, hasMany=False, isDerived=False, columns=[]):
            templateRow = _TemplateRow(
                templateId=self.templateId,
                templateRowType=templateRowType,
                hasMany=hasMany,
                isDerived=isDerived
            )

            for column in columns:
                templateRow.add_column(column["columnName"], grouped=column["grouped"], func=column["func"])

            return templateRow

    class _TemplateRow(Base):
        __tablename__ = 'templateRow'
        templateRowId = db.Column(db.Integer, primary_key=True, autoincrement=True)
        templateId = db.Column(db.Integer, db.ForeignKey("template.templateId"))
        templateRowType = db.Column(db.String(200), nullable=False)
        hasMany = db.Column(db.Boolean, nullable=False, default=False)
        isDerived = db.Column(db.Boolean, nullable=False, default=False)

        def add_derivative_template_row(self, derivativeTemplateRow):
            _TemplateRow_DerivativeTemplateRow(
                templateRowId=self.templateRowId,
                derivativeTemplateRowId=derivativeTemplateRow.templateRowId
            )

            return self

        def add_column(self, templateRowColumnName, grouped=False, func=None):
            return _TemplateRowColumn(
                templateRowId=self.templateRowId,
                templateRowColumnName=templateRowColumnName,
                grouped=grouped,
                func=func
            )

    class _TemplateRowColumn(Base):
        __tablename__ = 'templateRowColumn'
        templateRowColumnId = db.Column(db.Integer, primary_key=True, autoincrement=True)
        templateRowId = db.Column(db.Integer, db.ForeignKey("templateRow.templateRowId"))
        templateRowColumnName = db.Column(db.String(200), nullable=False)
        grouped = db.Column(db.Boolean, default=False, nullable=False)
        func = db.Column(db.String(200), nullable=True)

    class _TemplateRow_DerivativeTemplateRow(Base):
        __tablename__ = 'templateRow_derivativeTemplateRow'
        templateRowId = db.Column(db.Integer, db.ForeignKey("templateRow.templateRowId"), primary_key=True)
        derivativeTemplateRowId = db.Column(db.Integer, db.ForeignKey("templateRow.templateRowId"), primary_key=True)

    existing_tally_sheet_version_rows = []

    #################################################################################################################
    # Update existing election's electionTemplateName
    #################################################################################################################
    existing_elections = session.query(
        _Election
    ).all()

    # Update all existing election's template to "PRESIDENTIAL_ELECTION_2019"
    for existing_election in existing_elections:
        existing_election.electionTemplateName = "PRESIDENTIAL_ELECTION_2019"
        session.add(existing_election)

    session.flush()

    # END ###########################################################################################################

    #################################################################################################################
    # PRE 41 rows
    #################################################################################################################
    class _TallySheetVersionRow_PRE_41(Base):
        __tablename__ = 'tallySheetVersionRow_PRE_41'
        tallySheetVersionRowId = db.Column(db.Integer, primary_key=True)
        tallySheetVersionId = db.Column(db.Integer, db.ForeignKey("tallySheetVersion.tallySheetVersionId"),
                                        nullable=False)
        candidateId = db.Column(db.Integer, nullable=False)
        count = db.Column(db.Integer, nullable=False)
        countInWords = db.Column(db.String(1000), nullable=True)

    tally_sheet_template_pre_41 = _Template(
        templateName="PRE-41"
    )
    tally_sheet_template_pre_41_candidate_wise_first_preference_row = tally_sheet_template_pre_41.add_row(
        templateRowType="CANDIDATE_FIRST_PREFERENCE",
        hasMany=True,
        isDerived=False,
        columns=[
            {"columnName": "electionId", "grouped": False, "func": None},
            {"columnName": "areaId", "grouped": False, "func": None},
            {"columnName": "partyId", "grouped": False, "func": None},
            {"columnName": "candidateId", "grouped": False, "func": None},
            {"columnName": "numValue", "grouped": False, "func": None},
            {"columnName": "strValue", "grouped": False, "func": None}
        ]
    )
    tally_sheet_template_pre_41_rejected_vote_row = tally_sheet_template_pre_41.add_row(
        templateRowType="REJECTED_VOTE",
        hasMany=False,
        isDerived=False,
        columns=[
            {"columnName": "electionId", "grouped": False, "func": None},
            {"columnName": "areaId", "grouped": False, "func": None},
            {"columnName": "numValue", "grouped": False, "func": None}
        ]
    )

    session.add(tally_sheet_template_pre_41)
    session.add(tally_sheet_template_pre_41_candidate_wise_first_preference_row)
    session.add(tally_sheet_template_pre_41_rejected_vote_row)
    session.flush()

    existing_tally_sheets = session.query(
        _TallySheet
    ).filter(
        _TallySheet.tallySheetCode == "PRE_41"
    ).all()

    for existing_tally_sheet in existing_tally_sheets:
        existing_tally_sheet.templateId = tally_sheet_template_pre_41.templateId

    existing_tally_sheet_version_rows = existing_tally_sheet_version_rows + session.query(
        _TallySheetVersionRow_PRE_41.tallySheetVersionId,
        _Submission.electionId,
        _Submission.areaId,
        _ElectionCandidate.partyId,
        _TallySheetVersionRow_PRE_41.candidateId,
        _TallySheetVersionRow_PRE_41.count.label("numValue"),
        _TallySheetVersionRow_PRE_41.countInWords.label("strValue"),
        literal(tally_sheet_template_pre_41_candidate_wise_first_preference_row.templateRowId).label("templateRowId")
    ).join(
        _TallySheetVersion,
        _TallySheetVersion.tallySheetVersionId == _TallySheetVersionRow_PRE_41.tallySheetVersionId
    ).join(
        _SubmissionVersion,
        _SubmissionVersion.submissionVersionId == _TallySheetVersion.tallySheetVersionId
    ).join(
        _Submission,
        _Submission.submissionId == _SubmissionVersion.submissionId
    ).join(
        _ElectionCandidate,
        _ElectionCandidate.candidateId == _TallySheetVersionRow_PRE_41.candidateId
    ).all()

    existing_tally_sheet_version_rows = existing_tally_sheet_version_rows + session.query(
        _TallySheetVersionRow_RejectedVoteCount.tallySheetVersionId,
        _Submission.electionId,
        _Submission.areaId,
        _TallySheetVersionRow_RejectedVoteCount.rejectedVoteCount.label("numValue"),
        literal(tally_sheet_template_pre_41_rejected_vote_row.templateRowId).label("templateRowId")
    ).join(
        _TallySheetVersion,
        _TallySheetVersion.tallySheetVersionId == _TallySheetVersionRow_RejectedVoteCount.tallySheetVersionId
    ).join(
        _SubmissionVersion,
        _SubmissionVersion.submissionVersionId == _TallySheetVersion.tallySheetVersionId
    ).join(
        _Submission,
        _Submission.submissionId == _SubmissionVersion.submissionId
    ).join(
        _TallySheet,
        _TallySheet.tallySheetId == _Submission.submissionId
    ).filter(
        _TallySheet.templateId == tally_sheet_template_pre_41.templateId
    ).all()

    # END ###########################################################################################################

    #################################################################################################################
    # PRE 30 PD rows
    #################################################################################################################
    class _TallySheetVersionRow_PRE_30_PD(Base):
        __tablename__ = 'tallySheetVersionRow_PRE_30_PD'
        tallySheetVersionRowId = db.Column(db.Integer, primary_key=True)
        tallySheetVersionId = db.Column(db.Integer, db.ForeignKey("tallySheetVersion.tallySheetVersionId"),
                                        nullable=False)
        candidateId = db.Column(db.Integer, nullable=False)
        countingCentreId = db.Column(db.Integer, nullable=False)
        count = db.Column(db.Integer, nullable=False)

    tally_sheet_template_pre_30_pd = _Template(
        templateName="PRE-30-PD"
    )
    tally_sheet_template_pre_30_pd_candidate_wise_first_preference_row = tally_sheet_template_pre_30_pd.add_row(
        templateRowType="CANDIDATE_FIRST_PREFERENCE",
        hasMany=True,
        isDerived=True,
        columns=[
            {"columnName": "electionId", "grouped": True, "func": None},
            {"columnName": "areaId", "grouped": True, "func": None},
            {"columnName": "partyId", "grouped": True, "func": None},
            {"columnName": "candidateId", "grouped": True, "func": None},
            {"columnName": "numValue", "grouped": False, "func": "sum"}
        ]
    ).add_derivative_template_row(tally_sheet_template_pre_41_candidate_wise_first_preference_row)
    tally_sheet_template_pre_30_pd_rejected_vote_row = tally_sheet_template_pre_30_pd.add_row(
        templateRowType="REJECTED_VOTE",
        hasMany=True,
        isDerived=True,
        columns=[
            {"columnName": "electionId", "grouped": True, "func": None},
            {"columnName": "areaId", "grouped": True, "func": None},
            {"columnName": "numValue", "grouped": False, "func": "sum"}
        ]
    ).add_derivative_template_row(tally_sheet_template_pre_41_rejected_vote_row)

    session.add(tally_sheet_template_pre_30_pd)
    session.add(tally_sheet_template_pre_30_pd_candidate_wise_first_preference_row)
    session.add(tally_sheet_template_pre_30_pd_rejected_vote_row)
    session.flush()

    existing_tally_sheets = session.query(
        _TallySheet
    ).filter(
        _TallySheet.tallySheetCode == "PRE_30_PD"
    ).all()

    for existing_tally_sheet in existing_tally_sheets:
        existing_tally_sheet.templateId = tally_sheet_template_pre_30_pd.templateId

    existing_tally_sheet_version_rows = existing_tally_sheet_version_rows + session.query(
        _TallySheetVersionRow_PRE_30_PD.tallySheetVersionId,
        _Submission.electionId,
        _TallySheetVersionRow_PRE_30_PD.countingCentreId.label("areaId"),
        _ElectionCandidate.partyId,
        _TallySheetVersionRow_PRE_30_PD.candidateId,
        _TallySheetVersionRow_PRE_30_PD.count.label("numValue"),
        literal(tally_sheet_template_pre_30_pd_candidate_wise_first_preference_row.templateRowId).label("templateRowId")
    ).join(
        _TallySheetVersion,
        _TallySheetVersion.tallySheetVersionId == _TallySheetVersionRow_PRE_30_PD.tallySheetVersionId
    ).join(
        _SubmissionVersion,
        _SubmissionVersion.submissionVersionId == _TallySheetVersion.tallySheetVersionId
    ).join(
        _Submission,
        _Submission.submissionId == _SubmissionVersion.submissionId
    ).join(
        _ElectionCandidate,
        _ElectionCandidate.candidateId == _TallySheetVersionRow_PRE_30_PD.candidateId
    ).all()

    existing_tally_sheet_version_rows = existing_tally_sheet_version_rows + session.query(
        _TallySheetVersionRow_RejectedVoteCount.tallySheetVersionId,
        _Submission.electionId,
        _TallySheetVersionRow_RejectedVoteCount.areaId,
        _TallySheetVersionRow_RejectedVoteCount.rejectedVoteCount.label("numValue"),
        literal(tally_sheet_template_pre_30_pd_rejected_vote_row.templateRowId).label("templateRowId")
    ).join(
        _TallySheetVersion,
        _TallySheetVersion.tallySheetVersionId == _TallySheetVersionRow_RejectedVoteCount.tallySheetVersionId
    ).join(
        _SubmissionVersion,
        _SubmissionVersion.submissionVersionId == _TallySheetVersion.tallySheetVersionId
    ).join(
        _Submission,
        _Submission.submissionId == _SubmissionVersion.submissionId
    ).join(
        _TallySheet,
        _TallySheet.tallySheetId == _Submission.submissionId
    ).filter(
        _TallySheet.templateId == tally_sheet_template_pre_30_pd.templateId
    ).all()

    # END ###########################################################################################################

    #################################################################################################################
    # PRE 30 ED rows
    #################################################################################################################
    class _TallySheetVersionRow_PRE_30_ED(Base):
        __tablename__ = 'tallySheetVersionRow_PRE_30_ED'
        tallySheetVersionRowId = db.Column(db.Integer, primary_key=True)
        tallySheetVersionId = db.Column(db.Integer, db.ForeignKey("tallySheetVersion.tallySheetVersionId"),
                                        nullable=False)
        electionId = db.Column(db.Integer, db.ForeignKey("election.electionId"), nullable=False)
        areaId = db.Column(db.Integer, nullable=True)
        candidateId = db.Column(db.Integer, nullable=False)
        countingCentreId = db.Column(db.Integer, nullable=False)
        count = db.Column(db.Integer, nullable=False)

    tally_sheet_template_pre_30_ed = _Template(
        templateName="PRE-30-ED"
    )
    tally_sheet_template_pre_30_ed_candidate_wise_first_preference_row = tally_sheet_template_pre_30_ed.add_row(
        templateRowType="CANDIDATE_FIRST_PREFERENCE",
        hasMany=True,
        isDerived=True,
        columns=[
            {"columnName": "electionId", "grouped": True, "func": None},
            {"columnName": "areaId", "grouped": True, "func": None},
            {"columnName": "partyId", "grouped": True, "func": None},
            {"columnName": "candidateId", "grouped": True, "func": None},
            {"columnName": "numValue", "grouped": False, "func": "sum"}
        ]
    ).add_derivative_template_row(tally_sheet_template_pre_30_pd_candidate_wise_first_preference_row)
    tally_sheet_template_pre_30_ed_rejected_vote_row = tally_sheet_template_pre_30_ed.add_row(
        templateRowType="REJECTED_VOTE",
        hasMany=True,
        isDerived=True,
        columns=[
            {"columnName": "electionId", "grouped": True, "func": None},
            {"columnName": "areaId", "grouped": True, "func": None},
            {"columnName": "numValue", "grouped": False, "func": "sum"}
        ]
    ).add_derivative_template_row(tally_sheet_template_pre_30_pd_rejected_vote_row)

    session.add(tally_sheet_template_pre_30_ed)
    session.add(tally_sheet_template_pre_30_ed_candidate_wise_first_preference_row)
    session.add(tally_sheet_template_pre_30_ed_rejected_vote_row)
    session.flush()

    existing_tally_sheets = session.query(
        _TallySheet
    ).filter(
        _TallySheet.tallySheetCode == "PRE_30_ED"
    ).all()

    for existing_tally_sheet in existing_tally_sheets:
        existing_tally_sheet.templateId = tally_sheet_template_pre_30_ed.templateId

    existing_tally_sheet_version_rows = existing_tally_sheet_version_rows + session.query(
        _TallySheetVersionRow_PRE_30_ED.tallySheetVersionId,
        _TallySheetVersionRow_PRE_30_ED.electionId,
        _TallySheetVersionRow_PRE_30_ED.areaId.label("areaId"),
        _ElectionCandidate.partyId,
        _TallySheetVersionRow_PRE_30_ED.candidateId,
        _TallySheetVersionRow_PRE_30_ED.count.label("numValue"),
        literal(tally_sheet_template_pre_30_ed_candidate_wise_first_preference_row.templateRowId).label("templateRowId")
    ).join(
        _TallySheetVersion,
        _TallySheetVersion.tallySheetVersionId == _TallySheetVersionRow_PRE_30_ED.tallySheetVersionId
    ).join(
        _SubmissionVersion,
        _SubmissionVersion.submissionVersionId == _TallySheetVersion.tallySheetVersionId
    ).join(
        _Submission,
        _Submission.submissionId == _SubmissionVersion.submissionId
    ).join(
        _ElectionCandidate,
        _ElectionCandidate.candidateId == _TallySheetVersionRow_PRE_30_ED.candidateId
    ).all()

    existing_tally_sheet_version_rows = existing_tally_sheet_version_rows + session.query(
        _TallySheetVersionRow_RejectedVoteCount.tallySheetVersionId,
        _TallySheetVersionRow_RejectedVoteCount.electionId,
        _TallySheetVersionRow_RejectedVoteCount.areaId,
        _TallySheetVersionRow_RejectedVoteCount.rejectedVoteCount.label("numValue"),
        literal(tally_sheet_template_pre_30_ed_rejected_vote_row.templateRowId).label("templateRowId")
    ).join(
        _TallySheetVersion,
        _TallySheetVersion.tallySheetVersionId == _TallySheetVersionRow_RejectedVoteCount.tallySheetVersionId
    ).join(
        _SubmissionVersion,
        _SubmissionVersion.submissionVersionId == _TallySheetVersion.tallySheetVersionId
    ).join(
        _Submission,
        _Submission.submissionId == _SubmissionVersion.submissionId
    ).join(
        _TallySheet,
        _TallySheet.tallySheetId == _Submission.submissionId
    ).filter(
        _TallySheet.templateId == tally_sheet_template_pre_30_ed.templateId
    ).all()

    # END ###########################################################################################################

    #################################################################################################################
    # PRE All Island ED rows
    #################################################################################################################
    class _TallySheetVersionRow_PRE_ALL_ISLAND_RESULTS_BY_ELECTORAL_DISTRICTS(Base):
        __tablename__ = 'tallySheetVersionRow_ALL_ISLAND_RESULTS_BY_ED'
        tallySheetVersionRowId = db.Column(db.Integer, primary_key=True)
        tallySheetVersionId = db.Column(db.Integer, db.ForeignKey("tallySheetVersion.tallySheetVersionId"),
                                        nullable=False)
        electoralDistrictId = db.Column(db.Integer, nullable=True)
        candidateId = db.Column(db.Integer, nullable=False)
        count = db.Column(db.Integer, nullable=False)

    tally_sheet_template_pre_all_island_ed = _Template(
        templateName="PRE-ALL-ISLAND-RESULTS-BY-ELECTORAL-DISTRICTS"
    )
    tally_sheet_template_pre_all_island_ed_candidate_wise_first_preference_row = tally_sheet_template_pre_all_island_ed.add_row(
        templateRowType="CANDIDATE_FIRST_PREFERENCE",
        hasMany=True,
        isDerived=True,
        columns=[
            {"columnName": "electionId", "grouped": True, "func": None},
            {"columnName": "areaId", "grouped": True, "func": None},
            {"columnName": "partyId", "grouped": True, "func": None},
            {"columnName": "candidateId", "grouped": True, "func": None},
            {"columnName": "numValue", "grouped": False, "func": "sum"}
        ]
    ).add_derivative_template_row(tally_sheet_template_pre_30_ed_candidate_wise_first_preference_row)
    tally_sheet_template_pre_all_island_ed_rejected_vote_row = tally_sheet_template_pre_all_island_ed.add_row(
        templateRowType="REJECTED_VOTE",
        hasMany=False,
        isDerived=True,
        columns=[
            {"columnName": "electionId", "grouped": True, "func": None},
            {"columnName": "areaId", "grouped": True, "func": None},
            {"columnName": "numValue", "grouped": False, "func": "sum"}
        ]
    ).add_derivative_template_row(tally_sheet_template_pre_30_ed_rejected_vote_row)

    session.add(tally_sheet_template_pre_all_island_ed)
    session.add(tally_sheet_template_pre_all_island_ed_candidate_wise_first_preference_row)
    session.add(tally_sheet_template_pre_all_island_ed_rejected_vote_row)
    session.flush()

    existing_tally_sheets = session.query(
        _TallySheet
    ).filter(
        _TallySheet.tallySheetCode == "PRE_ALL_ISLAND_RESULTS_BY_ELECTORAL_DISTRICTS"
    ).all()

    for existing_tally_sheet in existing_tally_sheets:
        existing_tally_sheet.templateId = tally_sheet_template_pre_all_island_ed.templateId

    existing_tally_sheet_version_rows = existing_tally_sheet_version_rows + session.query(
        _TallySheetVersionRow_PRE_ALL_ISLAND_RESULTS_BY_ELECTORAL_DISTRICTS.tallySheetVersionId,
        _Submission.electionId,
        _TallySheetVersionRow_PRE_ALL_ISLAND_RESULTS_BY_ELECTORAL_DISTRICTS.electoralDistrictId.label("areaId"),
        _ElectionCandidate.partyId,
        _TallySheetVersionRow_PRE_ALL_ISLAND_RESULTS_BY_ELECTORAL_DISTRICTS.candidateId,
        _TallySheetVersionRow_PRE_ALL_ISLAND_RESULTS_BY_ELECTORAL_DISTRICTS.count.label("numValue"),
        literal(tally_sheet_template_pre_all_island_ed_candidate_wise_first_preference_row.templateRowId).label(
            "templateRowId")
    ).join(
        _TallySheetVersion,
        _TallySheetVersion.tallySheetVersionId == _TallySheetVersionRow_PRE_ALL_ISLAND_RESULTS_BY_ELECTORAL_DISTRICTS.tallySheetVersionId
    ).join(
        _SubmissionVersion,
        _SubmissionVersion.submissionVersionId == _TallySheetVersion.tallySheetVersionId
    ).join(
        _Submission,
        _Submission.submissionId == _SubmissionVersion.submissionId
    ).join(
        _ElectionCandidate,
        _ElectionCandidate.candidateId == _TallySheetVersionRow_PRE_ALL_ISLAND_RESULTS_BY_ELECTORAL_DISTRICTS.candidateId
    ).all()

    existing_tally_sheet_version_rows = existing_tally_sheet_version_rows + session.query(
        _TallySheetVersionRow_RejectedVoteCount.tallySheetVersionId,
        _TallySheetVersionRow_RejectedVoteCount.electionId,
        _TallySheetVersionRow_RejectedVoteCount.areaId,
        _TallySheetVersionRow_RejectedVoteCount.rejectedVoteCount.label("numValue"),
        literal(tally_sheet_template_pre_all_island_ed_rejected_vote_row.templateRowId).label("templateRowId")
    ).join(
        _TallySheetVersion,
        _TallySheetVersion.tallySheetVersionId == _TallySheetVersionRow_RejectedVoteCount.tallySheetVersionId
    ).join(
        _SubmissionVersion,
        _SubmissionVersion.submissionVersionId == _TallySheetVersion.tallySheetVersionId
    ).join(
        _Submission,
        _Submission.submissionId == _SubmissionVersion.submissionId
    ).join(
        _TallySheet,
        _TallySheet.tallySheetId == _Submission.submissionId
    ).filter(
        _TallySheet.templateId == tally_sheet_template_pre_all_island_ed.templateId
    ).all()

    # END ###########################################################################################################

    #################################################################################################################
    # PRE All Island rows
    #################################################################################################################
    class _TallySheetVersionRow_ALL_ISLAND_RESULT(Base):
        __tablename__ = 'tallySheetVersionRow_ALL_ISLAND_RESULT'
        tallySheetVersionRowId = db.Column(db.Integer, primary_key=True)
        tallySheetVersionId = db.Column(db.Integer, db.ForeignKey("tallySheetVersion.tallySheetVersionId"),
                                        nullable=False)
        candidateId = db.Column(db.Integer, nullable=False)
        count = db.Column(db.Integer, nullable=False)

    tally_sheet_template_pre_all_island = _Template(
        templateName="PRE-ALL-ISLAND-RESULTS"
    )
    tally_sheet_template_pre_all_island_candidate_wise_first_preference_row = tally_sheet_template_pre_all_island.add_row(
        templateRowType="CANDIDATE_FIRST_PREFERENCE",
        hasMany=True,
        isDerived=True,
        columns=[
            {"columnName": "electionId", "grouped": True, "func": None},
            {"columnName": "areaId", "grouped": True, "func": None},
            {"columnName": "partyId", "grouped": True, "func": None},
            {"columnName": "candidateId", "grouped": True, "func": None},
            {"columnName": "numValue", "grouped": False, "func": "sum"}
        ]
    ).add_derivative_template_row(tally_sheet_template_pre_all_island_ed_candidate_wise_first_preference_row)
    tally_sheet_template_pre_all_island_rejected_vote_row = tally_sheet_template_pre_all_island.add_row(
        templateRowType="REJECTED_VOTE",
        hasMany=True,
        isDerived=True,
        columns=[
            {"columnName": "electionId", "grouped": True, "func": None},
            {"columnName": "areaId", "grouped": True, "func": None},
            {"columnName": "numValue", "grouped": False, "func": "sum"}
        ]
    ).add_derivative_template_row(tally_sheet_template_pre_all_island_ed_rejected_vote_row)

    session.add(tally_sheet_template_pre_all_island)
    session.add(tally_sheet_template_pre_all_island_candidate_wise_first_preference_row)
    session.add(tally_sheet_template_pre_all_island_rejected_vote_row)
    session.flush()

    existing_tally_sheets = session.query(
        _TallySheet
    ).filter(
        _TallySheet.tallySheetCode == "PRE_ALL_ISLAND_RESULTS"
    ).all()

    for existing_tally_sheet in existing_tally_sheets:
        existing_tally_sheet.templateId = tally_sheet_template_pre_all_island.templateId

    existing_tally_sheet_version_rows = existing_tally_sheet_version_rows + session.query(
        _TallySheetVersionRow_ALL_ISLAND_RESULT.tallySheetVersionId,
        _Submission.electionId,
        _Submission.areaId.label("areaId"),
        _ElectionCandidate.partyId,
        _TallySheetVersionRow_ALL_ISLAND_RESULT.candidateId,
        _TallySheetVersionRow_ALL_ISLAND_RESULT.count.label("numValue"),
        literal(tally_sheet_template_pre_all_island_candidate_wise_first_preference_row.templateRowId).label(
            "templateRowId")
    ).join(
        _TallySheetVersion,
        _TallySheetVersion.tallySheetVersionId == _TallySheetVersionRow_ALL_ISLAND_RESULT.tallySheetVersionId
    ).join(
        _SubmissionVersion,
        _SubmissionVersion.submissionVersionId == _TallySheetVersion.tallySheetVersionId
    ).join(
        _Submission,
        _Submission.submissionId == _SubmissionVersion.submissionId
    ).join(
        _ElectionCandidate,
        _ElectionCandidate.candidateId == _TallySheetVersionRow_ALL_ISLAND_RESULT.candidateId
    ).all()

    existing_tally_sheet_version_rows = existing_tally_sheet_version_rows + session.query(
        _TallySheetVersionRow_RejectedVoteCount.tallySheetVersionId,
        _TallySheetVersionRow_RejectedVoteCount.electionId,
        _TallySheetVersionRow_RejectedVoteCount.areaId,
        _TallySheetVersionRow_RejectedVoteCount.rejectedVoteCount.label("numValue"),
        literal(tally_sheet_template_pre_all_island_rejected_vote_row.templateRowId).label("templateRowId")
    ).join(
        _TallySheetVersion,
        _TallySheetVersion.tallySheetVersionId == _TallySheetVersionRow_RejectedVoteCount.tallySheetVersionId
    ).join(
        _SubmissionVersion,
        _SubmissionVersion.submissionVersionId == _TallySheetVersion.tallySheetVersionId
    ).join(
        _Submission,
        _Submission.submissionId == _SubmissionVersion.submissionId
    ).join(
        _TallySheet,
        _TallySheet.tallySheetId == _Submission.submissionId
    ).filter(
        _TallySheet.templateId == tally_sheet_template_pre_all_island.templateId
    ).all()

    # END ###########################################################################################################

    #################################################################################################################
    # Insert all the tally sheet version rows
    #################################################################################################################

    tally_sheet_version_row_attribute_names = ["tallySheetVersionId", "templateRowId", "electionId", "areaId",
                                               "partyId", "candidateId",
                                               "numValue", "strValue"]
    for existing_tally_sheet_version_row in existing_tally_sheet_version_rows:
        tally_sheet_version_row_dict = {}
        for tally_sheet_version_row_attribute_name in tally_sheet_version_row_attribute_names:
            if hasattr(existing_tally_sheet_version_row, tally_sheet_version_row_attribute_name):
                tally_sheet_version_row_dict[tally_sheet_version_row_attribute_name] = getattr(
                    existing_tally_sheet_version_row, tally_sheet_version_row_attribute_name
                )

        print("##### [INSERT] tallySheetVersionRow ", tally_sheet_version_row_dict)
        session.add(_TallySheetVersionRow(**tally_sheet_version_row_dict))

    session.commit()

    # END ###########################################################################################################

    op.drop_table('tallySheetVersionRow_PRE_41')
    op.drop_table('tallySheetVersionRow_PRE_34_summary')
    op.drop_table('tallySheetVersionRow_PRE_30_PD')
    op.drop_table('tallySheetVersionRow_PRE_21')
    op.drop_table('tallySheetVersionRow_PRE_34_Preference')
    # op.drop_table('tallySheetVersionRow_CE_201_PV_CC')
    op.drop_table('tallySheetVersionRow_PRE_30_ED')
    # op.drop_table('tallySheetVersionRow_CE_201_ballotBox')
    # op.drop_table('tallySheetVersionRow_CE_201_PV')
    op.drop_table('tallySheetVersionRow_RejectedVoteCount')
    op.drop_table('tallySheetVersionRow_ALL_ISLAND_RESULT')
    op.drop_table('tallySheetVersionRow_ALL_ISLAND_RESULTS_BY_ED')
    # op.drop_table('tallySheetVersionRow_CE_201')
    op.drop_column('tallySheet', 'tallySheetCode')
    op.drop_column('tallySheetVersion', 'tallySheetVersionCode')


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        'tallySheetVersion', sa.Column(
            'tallySheetVersionCode',
            mysql.ENUM('CE_201', 'CE_201_PV', 'PRE_28', 'PRE_41', 'PRE_30_PD',
                       'PRE_30_PD_PV', 'PRE_30_ED', 'PRE_21', 'PRE_34_CO',
                       'PRE_34_I_RO', 'PRE_34_II_RO', 'PRE_34',
                       'PRE_ALL_ISLAND_RESULTS_BY_ELECTORAL_DISTRICTS',
                       'PRE_ALL_ISLAND_RESULTS', 'PRE_34_PD', 'PRE_34_ED',
                       'PRE_34_AI', collation='utf8mb4_unicode_ci'),
            nullable=False))
    op.add_column(
        'tallySheet', sa.Column(
            'tallySheetCode',
            mysql.ENUM(
                'CE_201', 'CE_201_PV', 'PRE_28', 'PRE_41', 'PRE_30_PD',
                'PRE_30_PD_PV', 'PRE_30_ED', 'PRE_21', 'PRE_34_CO', 'PRE_34_I_RO',
                'PRE_34_II_RO', 'PRE_34',
                'PRE_ALL_ISLAND_RESULTS_BY_ELECTORAL_DISTRICTS',
                'PRE_ALL_ISLAND_RESULTS', 'PRE_34_PD', 'PRE_34_ED', 'PRE_34_AI',
                collation='utf8mb4_unicode_ci'), nullable=False))
    op.drop_constraint(None, 'tallySheet', type_='foreignkey')
    op.drop_column('tallySheet', 'templateId')
    op.alter_column(
        'election', 'voteType',
        existing_type=sa.String(length=100),
        type_=mysql.ENUM('Postal', 'NonPostal', 'PostalAndNonPostal', collation='utf8mb4_unicode_ci'),
        existing_nullable=False)
    op.alter_column(
        'election', 'isListed',
        existing_type=sa.Boolean(),
        type_=mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=100),
        existing_nullable=False)
    op.drop_column('election', 'electionTemplateName')
    op.alter_column(
        'area_map', 'voteType',
        existing_type=sa.String(length=100),
        type_=mysql.ENUM('Postal', 'NonPostal', 'PostalAndNonPostal', collation='utf8mb4_unicode_ci'),
        nullable=True)
    # op.create_table(
    #     'tallySheetVersionRow_CE_201',
    #     sa.Column('tallySheetVersionRowId', mysql.INTEGER(display_width=11), nullable=False),
    #     sa.Column('tallySheetVersionId', mysql.INTEGER(display_width=11), autoincrement=False,
    #               nullable=False),
    #     sa.Column('areaId', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
    #     sa.Column('ballotsIssued', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
    #     sa.Column('ballotsReceived', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
    #     sa.Column('ballotsSpoilt', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
    #     sa.Column('ballotsUnused', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
    #     sa.Column('ordinaryBallotCountFromBallotPaperAccount', mysql.INTEGER(display_width=11),
    #               autoincrement=False, nullable=False),
    #     sa.Column('ordinaryBallotCountFromBoxCount', mysql.INTEGER(display_width=11), autoincrement=False,
    #               nullable=False),
    #     sa.Column('tenderedBallotCountFromBallotPaperAccount', mysql.INTEGER(display_width=11),
    #               autoincrement=False, nullable=False),
    #     sa.Column('tenderedBallotCountFromBoxCount', mysql.INTEGER(display_width=11), autoincrement=False,
    #               nullable=False),
    #     sa.ForeignKeyConstraint(['areaId'], ['area.areaId'], name='tallySheetVersionRow_CE_201_ibfk_1'),
    #     sa.ForeignKeyConstraint(['tallySheetVersionId'], ['tallySheetVersion.tallySheetVersionId'],
    #                             name='tallySheetVersionRow_CE_201_ibfk_2'),
    #     sa.PrimaryKeyConstraint('tallySheetVersionRowId'),
    #     mysql_collate='utf8mb4_unicode_ci',
    #     mysql_default_charset='utf8mb4',
    #     mysql_engine='InnoDB'
    # )
    op.create_table(
        'tallySheetVersionRow_ALL_ISLAND_RESULTS_BY_ED',
        sa.Column('tallySheetVersionRowId', mysql.INTEGER(display_width=11), nullable=False),
        sa.Column('tallySheetVersionId', mysql.INTEGER(display_width=11), autoincrement=False,
                  nullable=False),
        sa.Column('electoralDistrictId', mysql.INTEGER(display_width=11), autoincrement=False,
                  nullable=False),
        sa.Column('candidateId', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
        sa.Column('count', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(['candidateId'], ['candidate.candidateId'],
                                name='tallySheetVersionRow_ALL_ISLAND_RESULTS_BY_ED_ibfk_1'),
        sa.ForeignKeyConstraint(['electoralDistrictId'], ['area.areaId'],
                                name='tallySheetVersionRow_ALL_ISLAND_RESULTS_BY_ED_ibfk_2'),
        sa.ForeignKeyConstraint(['tallySheetVersionId'], ['tallySheetVersion.tallySheetVersionId'],
                                name='tallySheetVersionRow_ALL_ISLAND_RESULTS_BY_ED_ibfk_3'),
        sa.PrimaryKeyConstraint('tallySheetVersionRowId'),
        mysql_collate='utf8mb4_unicode_ci',
        mysql_default_charset='utf8mb4',
        mysql_engine='InnoDB'
    )
    op.create_table(
        'tallySheetVersionRow_ALL_ISLAND_RESULT',
        sa.Column('tallySheetVersionRowId', mysql.INTEGER(display_width=11), nullable=False),
        sa.Column('tallySheetVersionId', mysql.INTEGER(display_width=11), autoincrement=False,
                  nullable=False),
        sa.Column('candidateId', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
        sa.Column('count', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(['candidateId'], ['candidate.candidateId'],
                                name='tallySheetVersionRow_ALL_ISLAND_RESULT_ibfk_1'),
        sa.ForeignKeyConstraint(['tallySheetVersionId'], ['tallySheetVersion.tallySheetVersionId'],
                                name='tallySheetVersionRow_ALL_ISLAND_RESULT_ibfk_2'),
        sa.PrimaryKeyConstraint('tallySheetVersionRowId'),
        mysql_collate='utf8mb4_unicode_ci',
        mysql_default_charset='utf8mb4',
        mysql_engine='InnoDB'
    )
    op.create_table(
        'tallySheetVersionRow_RejectedVoteCount',
        sa.Column('tallySheetVersionRowId', mysql.INTEGER(display_width=11), nullable=False),
        sa.Column('tallySheetVersionId', mysql.INTEGER(display_width=11), autoincrement=False,
                  nullable=False),
        sa.Column('electionId', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
        sa.Column('areaId', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True),
        sa.Column('candidateId', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True),
        sa.Column('rejectedVoteCount', mysql.INTEGER(display_width=11), autoincrement=False,
                  nullable=False),
        sa.ForeignKeyConstraint(['areaId'], ['area.areaId'],
                                name='tallySheetVersionRow_RejectedVoteCount_ibfk_1'),
        sa.ForeignKeyConstraint(['candidateId'], ['candidate.candidateId'],
                                name='tallySheetVersionRow_RejectedVoteCount_ibfk_2'),
        sa.ForeignKeyConstraint(['electionId'], ['election.electionId'],
                                name='tallySheetVersionRow_RejectedVoteCount_ibfk_3'),
        sa.ForeignKeyConstraint(['tallySheetVersionId'], ['tallySheetVersion.tallySheetVersionId'],
                                name='tallySheetVersionRow_RejectedVoteCount_ibfk_4'),
        sa.PrimaryKeyConstraint('tallySheetVersionRowId'),
        mysql_collate='utf8mb4_unicode_ci',
        mysql_default_charset='utf8mb4',
        mysql_engine='InnoDB'
    )
    # op.create_table(
    #     'tallySheetVersionRow_CE_201_PV',
    #     sa.Column('tallySheetVersionRowId', mysql.INTEGER(display_width=11), nullable=False),
    #     sa.Column('tallySheetVersionId', mysql.INTEGER(display_width=11), autoincrement=False,
    #               nullable=True),
    #     sa.Column('ballotBoxId', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=20), nullable=True),
    #     sa.Column('numberOfPacketsInserted', mysql.INTEGER(display_width=11), autoincrement=False,
    #               nullable=True),
    #     sa.Column('numberOfAPacketsFound', mysql.INTEGER(display_width=11), autoincrement=False,
    #               nullable=True),
    #     sa.ForeignKeyConstraint(['tallySheetVersionId'], ['tallySheetVersion.tallySheetVersionId'],
    #                             name='tallySheetVersionRow_CE_201_PV_ibfk_1'),
    #     sa.PrimaryKeyConstraint('tallySheetVersionRowId'),
    #     mysql_collate='utf8mb4_unicode_ci',
    #     mysql_default_charset='utf8mb4',
    #     mysql_engine='InnoDB'
    # )
    # op.create_table(
    #     'tallySheetVersionRow_CE_201_ballotBox',
    #     sa.Column('tallySheetVersionRowId', mysql.INTEGER(display_width=11), autoincrement=False,
    #               nullable=False),
    #     sa.Column('ballotBoxId', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=100), nullable=False),
    #     sa.Column('invoiceStage', mysql.ENUM('Issued', 'Received', collation='utf8mb4_unicode_ci'),
    #               nullable=False),
    #     sa.ForeignKeyConstraint(['tallySheetVersionRowId'],
    #                             ['tallySheetVersionRow_CE_201.tallySheetVersionRowId'],
    #                             name='tallySheetVersionRow_CE_201_ballotBox_ibfk_1'),
    #     sa.PrimaryKeyConstraint('tallySheetVersionRowId', 'ballotBoxId', 'invoiceStage'),
    #     mysql_collate='utf8mb4_unicode_ci',
    #     mysql_default_charset='utf8mb4',
    #     mysql_engine='InnoDB'
    # )
    op.create_table(
        'tallySheetVersionRow_PRE_30_ED',
        sa.Column('tallySheetVersionRowId', mysql.INTEGER(display_width=11), nullable=False),
        sa.Column('tallySheetVersionId', mysql.INTEGER(display_width=11), autoincrement=False,
                  nullable=False),
        sa.Column('candidateId', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
        sa.Column('electionId', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
        sa.Column('areaId', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
        sa.Column('count', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(['areaId'], ['area.areaId'], name='tallySheetVersionRow_PRE_30_ED_ibfk_1'),
        sa.ForeignKeyConstraint(['candidateId'], ['candidate.candidateId'],
                                name='tallySheetVersionRow_PRE_30_ED_ibfk_2'),
        sa.ForeignKeyConstraint(['electionId'], ['election.electionId'],
                                name='tallySheetVersionRow_PRE_30_ED_ibfk_3'),
        sa.ForeignKeyConstraint(['tallySheetVersionId'], ['tallySheetVersion.tallySheetVersionId'],
                                name='tallySheetVersionRow_PRE_30_ED_ibfk_4'),
        sa.PrimaryKeyConstraint('tallySheetVersionRowId'),
        mysql_collate='utf8mb4_unicode_ci',
        mysql_default_charset='utf8mb4',
        mysql_engine='InnoDB'
    )
    # op.create_table(
    #     'tallySheetVersionRow_CE_201_PV_CC',
    #     sa.Column('tallySheetVersionRowId', mysql.INTEGER(display_width=11), nullable=False),
    #     sa.Column('tallySheetVersionId', mysql.INTEGER(display_width=11), autoincrement=False,
    #               nullable=True),
    #     sa.Column('countingCentreId', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True),
    #     sa.Column('situation', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=100), nullable=True),
    #     sa.Column('timeOfCommencementOfCount', mysql.DATETIME(), nullable=True),
    #     sa.Column('numberOfAPacketsFound', mysql.INTEGER(display_width=11), autoincrement=False,
    #               nullable=True),
    #     sa.Column('numberOfACoversRejected', mysql.INTEGER(display_width=11), autoincrement=False,
    #               nullable=True),
    #     sa.Column('numberOfBCoversRejected', mysql.INTEGER(display_width=11), autoincrement=False,
    #               nullable=True),
    #     sa.Column('numberOfValidBallotPapers', mysql.INTEGER(display_width=11), autoincrement=False,
    #               nullable=True),
    #     sa.ForeignKeyConstraint(['countingCentreId'], ['area.areaId'],
    #                             name='tallySheetVersionRow_CE_201_PV_CC_ibfk_1'),
    #     sa.ForeignKeyConstraint(['tallySheetVersionId'], ['tallySheetVersion.tallySheetVersionId'],
    #                             name='tallySheetVersionRow_CE_201_PV_CC_ibfk_2'),
    #     sa.PrimaryKeyConstraint('tallySheetVersionRowId'),
    #     mysql_collate='utf8mb4_unicode_ci',
    #     mysql_default_charset='utf8mb4',
    #     mysql_engine='InnoDB'
    # )
    op.create_table(
        'tallySheetVersionRow_PRE_34_Preference',
        sa.Column('tallySheetVersionRowId', mysql.INTEGER(display_width=11), nullable=False),
        sa.Column('tallySheetVersionId', mysql.INTEGER(display_width=11), autoincrement=False,
                  nullable=False),
        sa.Column('electionId', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
        sa.Column('candidateId', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True),
        sa.Column('areaId', mysql.INTEGER(display_width=11), autoincrement=False, nullable=True),
        sa.Column('preferenceNumber', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
        sa.Column('preferenceCount', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(['areaId'], ['area.areaId'],
                                name='tallySheetVersionRow_PRE_34_Preference_ibfk_1'),
        sa.ForeignKeyConstraint(['candidateId'], ['candidate.candidateId'],
                                name='tallySheetVersionRow_PRE_34_Preference_ibfk_2'),
        sa.ForeignKeyConstraint(['electionId'], ['election.electionId'],
                                name='tallySheetVersionRow_PRE_34_Preference_ibfk_3'),
        sa.ForeignKeyConstraint(['tallySheetVersionId'], ['tallySheetVersion.tallySheetVersionId'],
                                name='tallySheetVersionRow_PRE_34_Preference_ibfk_4'),
        sa.PrimaryKeyConstraint('tallySheetVersionRowId'),
        mysql_collate='utf8mb4_unicode_ci',
        mysql_default_charset='utf8mb4',
        mysql_engine='InnoDB'
    )
    op.create_table(
        'tallySheetVersionRow_PRE_21',
        sa.Column('tallySheetVersionRowId', mysql.INTEGER(display_width=11), nullable=False),
        sa.Column('tallySheetVersionId', mysql.INTEGER(display_width=11), autoincrement=False,
                  nullable=True),
        sa.Column('count', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
        sa.Column('invalidVoteCategoryId', mysql.INTEGER(display_width=11), autoincrement=False,
                  nullable=False),
        sa.ForeignKeyConstraint(['invalidVoteCategoryId'],
                                ['election_invalidVoteCategory.invalidVoteCategoryId'],
                                name='tallySheetVersionRow_PRE_21_ibfk_1'),
        sa.ForeignKeyConstraint(['tallySheetVersionId'], ['tallySheetVersion.tallySheetVersionId'],
                                name='tallySheetVersionRow_PRE_21_ibfk_2'),
        sa.PrimaryKeyConstraint('tallySheetVersionRowId'),
        mysql_collate='utf8mb4_unicode_ci',
        mysql_default_charset='utf8mb4',
        mysql_engine='InnoDB'
    )
    op.create_table(
        'tallySheetVersionRow_PRE_30_PD',
        sa.Column('tallySheetVersionRowId', mysql.INTEGER(display_width=11), nullable=False),
        sa.Column('tallySheetVersionId', mysql.INTEGER(display_width=11), autoincrement=False,
                  nullable=False),
        sa.Column('candidateId', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
        sa.Column('countingCentreId', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
        sa.Column('count', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(['candidateId'], ['candidate.candidateId'],
                                name='tallySheetVersionRow_PRE_30_PD_ibfk_1'),
        sa.ForeignKeyConstraint(['countingCentreId'], ['area.areaId'],
                                name='tallySheetVersionRow_PRE_30_PD_ibfk_2'),
        sa.ForeignKeyConstraint(['tallySheetVersionId'], ['tallySheetVersion.tallySheetVersionId'],
                                name='tallySheetVersionRow_PRE_30_PD_ibfk_3'),
        sa.PrimaryKeyConstraint('tallySheetVersionRowId'),
        mysql_collate='utf8mb4_unicode_ci',
        mysql_default_charset='utf8mb4',
        mysql_engine='InnoDB'
    )
    op.create_table(
        'tallySheetVersionRow_PRE_34_summary',
        sa.Column('tallySheetVersionRowId', mysql.INTEGER(display_width=11), nullable=False),
        sa.Column('tallySheetVersionId', mysql.INTEGER(display_width=11), autoincrement=False,
                  nullable=False),
        sa.Column('electionId', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
        sa.Column('ballotPapersNotCounted', mysql.INTEGER(display_width=11), autoincrement=False,
                  nullable=False),
        sa.Column('remainingBallotPapers', mysql.INTEGER(display_width=11), autoincrement=False,
                  nullable=False),
        sa.ForeignKeyConstraint(['electionId'], ['election.electionId'],
                                name='tallySheetVersionRow_PRE_34_summary_ibfk_1'),
        sa.ForeignKeyConstraint(['tallySheetVersionId'], ['tallySheetVersion.tallySheetVersionId'],
                                name='tallySheetVersionRow_PRE_34_summary_ibfk_2'),
        sa.PrimaryKeyConstraint('tallySheetVersionRowId'),
        mysql_collate='utf8mb4_unicode_ci',
        mysql_default_charset='utf8mb4',
        mysql_engine='InnoDB'
    )
    op.create_table(
        'tallySheetVersionRow_PRE_41',
        sa.Column('tallySheetVersionRowId', mysql.INTEGER(display_width=11), nullable=False),
        sa.Column('tallySheetVersionId', mysql.INTEGER(display_width=11), autoincrement=False,
                  nullable=False),
        sa.Column('candidateId', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
        sa.Column('count', mysql.INTEGER(display_width=11), autoincrement=False, nullable=False),
        sa.Column('countInWords', mysql.VARCHAR(collation='utf8mb4_unicode_ci', length=1000),
                  nullable=True),
        sa.ForeignKeyConstraint(['candidateId'], ['candidate.candidateId'],
                                name='tallySheetVersionRow_PRE_41_ibfk_1'),
        sa.ForeignKeyConstraint(['tallySheetVersionId'], ['tallySheetVersion.tallySheetVersionId'],
                                name='tallySheetVersionRow_PRE_41_ibfk_2'),
        sa.PrimaryKeyConstraint('tallySheetVersionRowId', 'tallySheetVersionId', 'candidateId'),
        mysql_collate='utf8mb4_unicode_ci',
        mysql_default_charset='utf8mb4',
        mysql_engine='InnoDB'
    )
    op.drop_table('templateRow_derivativeTemplateRow')
    op.drop_table('templateRowColumn')
    op.drop_table('templateRow')
    op.drop_table('template')
    op.drop_table('tallySheet_tallySheet')
    op.drop_table('tallySheet_map')
    op.drop_table('tallySheetVersionRow')
